#+property: header-args:emacs-lisp :tangle init.el
#+startup: overview
#+title: Emacs Config

* Early Init

#+begin_src emacs-lisp :tangle early-init.el
;; -*- lexical-binding: t; -*-

(setq gc-cons-threshold (* 50 1000 1000))

(setq load-prefer-newer t)

(setq package-enable-at-startup nil)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(push '(menu-bar-lines . 0)   default-frame-alist)
(push '(tool-bar-lines . 0)   default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; And set these to nil so users don't have to toggle the modes twice to
;; reactivate them.
(setq menu-bar-mode nil
      tool-bar-mode nil
      scroll-bar-mode nil)
#+end_src

* Init

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(setq inhibit-startup-message t)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs loaded in %s seconds with %d garbage collections."
                     (emacs-init-time "%.2f")
                     gcs-done)))

(setq native-comp-async-report-warnings-errors nil)

(straight-use-package 'use-package)
#+end_src

* Mac

#+begin_src emacs-lisp
(setq mac-command-modifier      'super
      ns-command-modifier       'super
      mac-option-modifier       'meta
      ns-option-modifier        'meta
      ;; Free up the right option for character composition
      mac-right-option-modifier 'none
      ns-right-option-modifier  'none)

(setq ns-use-native-fullscreen nil)

;; Visit files opened outside of Emacs in existing frame, not a new one
(setq ns-pop-up-frames nil)

;; (setq mac-redisplay-dont-reset-vscroll t
;;       mac-mouse-wheel-smooth-scroll nil)

;; (require 'ns-auto-titlebar nil t)
;; (ns-auto-titlebar-mode +1)
#+end_src

* Frame

#+begin_src emacs-lisp
(set-frame-size nil 200 50)

;; Don't resize the frames in steps; it looks weird, especially in tiling window
;; managers, where it can leave unseemly gaps.
(setq frame-resize-pixelwise t)

;; But do not resize windows pixelwise, this can cause crashes in some cases
;; when resizing too many windows at once or rapidly.
(setq window-resize-pixelwise nil)

;;; Scrolling

(setq hscroll-margin 2
      hscroll-step 1
      fast-but-imprecise-scrolling t
      ;; Emacs spends too much effort recentering the screen if you scroll the
      ;; cursor more than N lines past window edges (where N is the settings of
      ;; `scroll-conservatively'). This is especially slow in larger files
      ;; during large-scale scrolling commands. If kept over 100, the window is
      ;; never automatically recentered.
      scroll-conservatively 101
      scroll-margin 0
      scroll-preserve-screen-position t
      ;; Reduce cursor lag by a tiny bit by not auto-adjusting `window-vscroll'
      ;; for tall lines.
      auto-window-vscroll nil
      ;; mouse
      mouse-wheel-scroll-amount '(2 ((shift) . hscroll))
      mouse-wheel-scroll-amount-horizontal 2)

;; (add-to-list 'default-frame-alist '(selected-frame) 'name nil)
;; (add-to-list 'default-frame-alist '(ns-appearance . dark))
;; (customize-set-variable mac-right-option-modifier nil)
;; (customize-set-variable mac-command-modifier 'super)
;; (customize-set-variable ns-function-modifier 'hyper))
#+end_src

;; (when (featurep 'native-compile)
;;   ;; Silence compiler warnings as they can be pretty disruptive
;;   (setq native-comp-async-report-warnings-errors nil)

;;   ;; Make native compilation happens asynchronously
;;   (setq native-comp-deferred-compilation t)

;;   ;; Set the right directory to store the native compilation cache
;;   ;; NOTE the method for setting the eln-cache directory depends on the emacs version
;;   (when (fboundp 'startup-redirect-eln-cache)
;;     (if (version< emacs-version "29")
;;         (add-to-list 'native-comp-eln-load-path (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory)))
;;       (startup-redirect-eln-cache (convert-standard-filename (expand-file-name "var/eln-cache/" user-emacs-directory)))))

;;   (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory)))
* Font

#+begin_src emacs-lisp
(defvar ar/font-size 12)

(defun ar/set-font-size (size)
  (setq ar/font-size size)
  ;; line-height: 1.5, line-spacing is added both above and below the text
  (setq-default line-spacing (ceiling (* size 0.25)))
  (dolist (face '(default fixed-pitch variable-pitch))
    (set-face-attribute face nil :height (* size 10))))

(defun ar/change-font-size (inc)
  (ar/set-font-size (+ ar/font-size inc)))

(dolist (face '(default fixed-pitch))
  (set-face-attribute face nil :family "JetBrains Mono"))
(set-face-attribute 'variable-pitch nil :family "Inter")

(ar/set-font-size 12)
#+end_src

* Icons

#+begin_src emacs-lisp
(straight-use-package 'all-the-icons)
#+end_src

* Editing

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(blink-cursor-mode -1)

;; Don't blink the paren matching the one at point, it's too distracting.
(setq blink-matching-paren nil)

;; Typing yes/no is obnoxious when y/n will do
(if (boundp 'use-short-answers)
    (setq use-short-answers t)
  ;; DEPRECATED: Remove when we drop 27.x support
  (advice-add #'yes-or-no-p :override #'y-or-n-p))

;; Explicitly define a width to reduce the cost of on-the-fly computation
(setq-default display-line-numbers-width 3)

;; Show absolute line numbers for narrowed regions to make it easier to tell the
;; buffer is narrowed, and where you are, exactly.
(setq-default display-line-numbers-widen t)

(setq display-line-numbers-type 'relative)

(dolist (mode '(prog-mode text-mode conf-mode))
  (add-hook (intern (format "%s-hook" mode))
            #'display-line-numbers-mode))

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; Revert buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Auto-insert matching bracket
(electric-pair-mode 1)

;; Turn on paren match highlighting
(show-paren-mode 1)

;; Enable savehist-mode for command history
(savehist-mode 1)

(setq tab-always-indent 'complete)

(defun doom-point-in-string-p (&optional pos)
  "Return non-nil if POS is in a string."
  ;; REVIEW Should we cache `syntax-ppss'?
  (let ((pos (or pos (point))))
    ;; (if doom-point-in-string-functions
    ;;     (run-hook-with-args-until-success 'doom-point-in-string-functions pos)
    (nth 3 (syntax-ppss pos))))

(defun doom/backward-delete-whitespace-to-column (&rest _r)
  "Delete back to the previous column of whitespace, or as much whitespace as
possible, or just one char if that's not possible."
  (interactive)
  (let* ((context
          (if (bound-and-true-p smartparens-mode)
              (ignore-errors (sp-get-thing))))
         (op (plist-get context :op))
         (cl (plist-get context :cl))
         open-len close-len current-column)
    (cond ;; When in strings (sp acts weird with quotes; this is the fix)
          ;; Also, skip closing delimiters
          ((and op cl
                (string= op cl)
                (and (string= (char-to-string (or (char-before) 0)) op)
                     (setq open-len (length op)))
                (and (string= (char-to-string (or (char-after) 0)) cl)
                     (setq close-len (length cl))))
           (delete-char (- open-len))
           (delete-char close-len))

          ;; Delete up to the nearest tab column IF only whitespace between
          ;; point and bol.
          ((and (not indent-tabs-mode)
                (> tab-width 1)
                (not (bolp))
                (not (doom-point-in-string-p))
                (>= (abs (save-excursion (skip-chars-backward " \t")))
                    (setq current-column (current-column))))
           (delete-char (- (1+ (% (1- current-column) tab-width)))))

          ;; Otherwise do a regular delete
          ((delete-char -1)))))

(advice-add #'delete-backward-char :override #'doom/backward-delete-whitespace-to-column)
#+end_src

* Ligatures

#+begin_src emacs-lisp
(defvar +ligatures-composition-alist
  '((?!  . "\\(?:!\\(?:==\\|[!=]\\)\\)")                                      ; (regexp-opt '("!!" "!=" "!=="))
    (?#  . "\\(?:#\\(?:###?\\|_(\\|[#(:=?[_{]\\)\\)")                         ; (regexp-opt '("##" "###" "####" "#(" "#:" "#=" "#?" "#[" "#_" "#_(" "#{"))
    (?$  . "\\(?:\\$>>?\\)")                                                  ; (regexp-opt '("$>" "$>>"))
    (?%  . "\\(?:%%%?\\)")                                                    ; (regexp-opt '("%%" "%%%"))
    (?&  . "\\(?:&&&?\\)")                                                    ; (regexp-opt '("&&" "&&&"))
    (?*  . "\\(?:\\*\\(?:\\*[*/]\\|[)*/>]\\)?\\)")                            ; (regexp-opt '("*" "**" "***" "**/" "*/" "*>" "*)"))
    (?+  . "\\(?:\\+\\(?:\\+\\+\\|[+:>]\\)?\\)")                              ; (regexp-opt '("+" "++" "+++" "+>" "+:"))
    (?-  . "\\(?:-\\(?:-\\(?:->\\|[>-]\\)\\|<[<-]\\|>[>-]\\|[:<>|}~-]\\)\\)") ; (regexp-opt '("--" "---" "-->" "--->" "->-" "-<" "-<-" "-<<" "->" "->>" "-}" "-~" "-:" "-|"))
    (?.  . "\\(?:\\.\\(?:\\.[.<]\\|[.=>-]\\)\\)")                             ; (regexp-opt '(".-" ".." "..." "..<" ".=" ".>"))
    (?/  . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")                      ; (regexp-opt '("/*" "/**" "//" "///" "/=" "/==" "/>"))
    (?:  . "\\(?::\\(?:::\\|[+:<=>]\\)?\\)")                                  ; (regexp-opt '(":" "::" ":::" ":=" ":<" ":=" ":>" ":+"))
    (?\; . ";;")                                                              ; (regexp-opt '(";;"))
    (?0  . "0\\(?:\\(x[a-fA-F0-9]\\).?\\)") ; Tries to match the x in 0xDEADBEEF
    ;; (?x . "x") ; Also tries to match the x in 0xDEADBEEF
    ;; (regexp-opt '("<!--" "<$" "<$>" "<*" "<*>" "<**>" "<+" "<+>" "<-" "<--" "<---" "<->" "<-->" "<--->" "</" "</>" "<<" "<<-" "<<<" "<<=" "<=" "<=<" "<==" "<=>" "<===>" "<>" "<|" "<|>" "<~" "<~~" "<." "<.>" "<..>"))
    (?<  . "\\(?:<\\(?:!--\\|\\$>\\|\\*\\(?:\\*?>\\)\\|\\+>\\|-\\(?:-\\(?:->\\|[>-]\\)\\|[>-]\\)\\|\\.\\(?:\\.?>\\)\\|/>\\|<[<=-]\\|=\\(?:==>\\|[<=>]\\)\\||>\\|~~\\|[$*+./<=>|~-]\\)\\)")
    (?=  . "\\(?:=\\(?:/=\\|:=\\|<[<=]\\|=[=>]\\|>[=>]\\|[=>]\\)\\)")         ; (regexp-opt '("=/=" "=:=" "=<<" "==" "===" "==>" "=>" "=>>" "=>=" "=<="))
    (?>  . "\\(?:>\\(?:->\\|=>\\|>[=>-]\\|[:=>-]\\)\\)")                      ; (regexp-opt '(">-" ">->" ">:" ">=" ">=>" ">>" ">>-" ">>=" ">>>"))
    (??  . "\\(?:\\?[.:=?]\\)")                                               ; (regexp-opt '("??" "?." "?:" "?="))
    (?\[ . "\\(?:\\[\\(?:|]\\|[]|]\\)\\)")                                    ; (regexp-opt '("[]" "[|]" "[|"))
    (?\\ . "\\(?:\\\\\\\\[\\n]?\\)")                                          ; (regexp-opt '("\\\\" "\\\\\\" "\\\\n"))
    (?^  . "\\(?:\\^==?\\)")                                                  ; (regexp-opt '("^=" "^=="))
    (?w  . "\\(?:wwww?\\)")                                                   ; (regexp-opt '("www" "wwww"))
    (?{  . "\\(?:{\\(?:|\\(?:|}\\|[|}]\\)\\|[|-]\\)\\)")                      ; (regexp-opt '("{-" "{|" "{||" "{|}" "{||}"))
    (?|  . "\\(?:|\\(?:->\\|=>\\||=\\|[]=>|}-]\\)\\)")                        ; (regexp-opt '("|=" "|>" "||" "||=" "|->" "|=>" "|]" "|}" "|-"))
    (?_  . "\\(?:_\\(?:|?_\\)\\)")                                            ; (regexp-opt '("_|_" "__"))
    (?\( . "\\(?:(\\*\\)")                                                    ; (regexp-opt '("(*"))
    (?~  . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)")))                                 ; (regexp-opt '("~-" "~=" "~>" "~@" "~~" "~~>"))

(defvar +ligature--composition-table (make-char-table nil))

(defun +ligature-init-composition-table-h ()
  (dolist (char-regexp +ligatures-composition-alist)
    (set-char-table-range
     +ligature--composition-table
     (car char-regexp) `([,(cdr char-regexp) 0 font-shape-gstring])))
  (set-char-table-parent +ligature--composition-table composition-function-table))

(+ligature-init-composition-table-h)

(defun +ligatures-init-buffer-h ()
  (if (boundp '+ligature--composition-table)
      (setq-local composition-function-table +ligature--composition-table)))

(add-hook 'after-change-major-mode-hook #'+ligatures-init-buffer-h)
#+end_src

* Backup and auto-save

#+begin_src emacs-lisp
;; Don't generate backups or lockfiles. While auto-save maintains a copy so long
;; as a buffer is unsaved, backups create copies once, when the file is first
;; written, and never again until it is killed and reopened. This is better
;; suited to version control, and I don't want world-readable copies of
;; potentially sensitive material floating around our filesystem.
(setq create-lockfiles nil
      make-backup-files nil
      ;; But in case the user does enable it, some sensible defaults:
      version-control t     ; number each backup file
      backup-by-copying t   ; instead of renaming current file (clobbers links)
      delete-old-versions t ; clean up after itself
      kept-old-versions 5
      kept-new-versions 5
      backup-directory-alist (list (cons "." (concat user-emacs-directory "backup/")))
      tramp-backup-directory-alist backup-directory-alist)

(setq auto-save-default nil)
#+end_src

* Create missing directories

#+begin_src emacs-lisp
;; Create missing directories when we open a file that doesn't exist under a
;; directory tree that may not exist.
(defun +doom-create-missing-directories-h ()
  "Automatically create missing directories when creating new files."
  (unless (file-remote-p buffer-file-name)
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (and (not (file-directory-p parent-directory))
           (y-or-n-p (format "Directory `%s' does not exist! Create it?"
                             parent-directory))
           (progn (make-directory parent-directory 'parents)
                  t)))))
(add-hook 'find-file-not-found-functions #'+doom-create-missing-directories-h)
#+end_src

* Hide mode line

#+begin_src emacs-lisp
(use-package hide-mode-line
  :straight t)
#+end_src

* Evil

#+begin_src emacs-lisp
(use-package evil
  :straight t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-respect-visual-line-mode t)
  ;; C-h is backspace in insert state
  ;; (customize-set-variable 'evil-want-C-h-delete t)

  (setq evil-want-C-i-jump t)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-want-fine-undo t)

  (setq evil-undo-system 'undo-fu)

  ;; (setq evil-collection-setup-minibuffer t)
  (setq evil-collection-want-unimpaired-p nil)
  ;; (setq evil-collection-want-find-usages-bindings-p nil)
  :config
  (evil-mode 1)

  ;; Try to fix escape
  (evil-set-command-properties 'evil-force-normal-state :suppress-operator t)

  (defun +evil-disable-ex-highlights-h (&rest r)
    (when (evil-ex-hl-active-p 'evil-ex-search)
      (evil-ex-nohighlight)
      t))

  (advice-add `evil-force-normal-state :after #'+evil-disable-ex-highlights-h)

  ;; Make evil search more like vim
  (evil-select-search-module 'evil-search-module 'evil-search)

  ;; Make C-g revert to normal state
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Rebind `universal-argument' to 'C-M-u' since 'C-u' now scrolls the buffer
  ;;(global-set-key (kbd "C-M-u") 'universal-argument)

  ;; Use visual line motions even outside of visual-line-mode buffers
  ;;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
  ;;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; Make sure some modes start in Emacs state
  (dolist (mode '(custom-mode vterm-mode))
    (add-to-list 'evil-emacs-state-modes mode))

  (defun +default-disable-delete-selection-mode-h ()
    (delete-selection-mode -1))
  (add-hook 'evil-insert-state-entry-hook #'delete-selection-mode)
  (add-hook 'evil-insert-state-exit-hook  #'+default-disable-delete-selection-mode-h)
  )

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

(use-package evil-nerd-commenter
  :straight t
  :after evil
  :config
  ;; Turn on Evil Nerd Commenter
  (evilnc-default-hotkeys))
#+end_src

* Keybindings

#+begin_src emacs-lisp
(defun ar/backward-kill-word (arg)
  (interactive "p")
  (let (kill-ring)
    (ignore-errors (backward-kill-word arg))))

(defun ar/project-vterm (name)
  (ar/project-buffer name #'ar/vterm))

(defvar ar/popup-buffers '())

(defun ar/popup-toggle ()
  (interactive)
  (if-let ((window (cl-find-if (lambda (w)
                                 (eq 'popup (window-parameter w 'window-slot)))
                               (window-list))))
      (delete-window window)
    (let* ((name (safe-persp-name (get-current-persp)))
           (buffer (nth 1 (cl-find-if (lambda (e) (string-equal name (car e)))
                                      ar/popup-buffers))))
      (unless buffer
        (setq buffer (current-buffer))
        (push (list name buffer) ar/popup-buffers))
      (window--make-major-side-window buffer 'bottom 'popup))))

(use-package general
  :straight t
  :config
  (general-create-definer ar-leader-def :prefix "SPC")

  (general-define-key
   :states '(normal visual)
   "gc" #'evilnc-comment-operator)

  (general-define-key
   :states '(normal)
   :keymaps '(prog-mode-map)
   "[e" #'previous-error
   "]e" #'next-error)


  (setq compilation-ask-about-save nil)

  (general-define-key
   :states '(normal motion)
   :keymaps '(prog-mode-map)
   "RET" #'recompile)

  ;; Minibuffer
  (general-define-key
   :keymaps '(minibuffer-local-map
              minibuffer-local-ns-map
              minibuffer-local-completion-map
              minibuffer-local-must-match-map
              minibuffer-local-isearch-map
              read-expression-map)
   [escape] #'abort-recursive-edit
   "C-a"    #'move-beginning-of-line
   "TAB"    #'completion-at-point
   "C-w"    #'ar/backward-kill-word)

  ;; Leader
  (ar-leader-def
   :states '(normal visual)
   :keymaps 'general-override-mode-map
   "`" #'consult-buffer
   ";" #'pp-eval-expression
   "," #'evil-switch-to-windows-last-buffer
   "." #'find-file
   "<" #'consult-project-buffer
   "/" #'consult-ripgrep
   "b d" #'kill-current-buffer
   "f f" #'find-file
   "g f" #'magit-find-file
   "g g" #'magit-status
   "h k" #'helpful-key
   "h K" #'describe-keymap
   "h m" #'describe-mode
   "h o" #'helpful-symbol
   "o t" #'ar/vterm
   "p a" #'projectile-add-known-project
   "p e" #'projectile-run-async-shell-command-in-root
   "p f" #'projectile-find-file
   "p p" #'projectile-switch-project
   "p r" (lambda () (interactive) (ar/project-vterm "run"))
   "p s" (lambda () (interactive) (ar/project-vterm "ssh"))
   "p t" #'ar/popup-toggle
   "w =" #'balance-windows
   "w q" #'delete-window)

  (general-override-mode 1))

(global-set-key (kbd "s--") (lambda () (interactive) (ar/change-font-size -2)))
(global-set-key (kbd "s-=") (lambda () (interactive) (ar/change-font-size +2)))
(global-set-key (kbd "s-h") #'evil-window-left)
(global-set-key (kbd "s-j") #'evil-window-down)
(global-set-key (kbd "s-k") #'evil-window-up)
(global-set-key (kbd "s-l") #'evil-window-right)
(global-set-key (kbd "M-s-h") #'evil-window-decrease-width)
(global-set-key (kbd "M-s-j") #'evil-window-increase-height)
(global-set-key (kbd "M-s-k") #'evil-window-decrease-height)
(global-set-key (kbd "M-s-l") #'evil-window-increase-width)
#+end_src

* Undo

#+begin_src emacs-lisp
(use-package undo-fu
  :straight t
  ;; :hook (doom-first-buffer . undo-fu-mode)
  :config
  ;; Increase undo history limits to reduce likelihood of data loss
  (setq undo-limit 400000           ; 400kb (default is 160kb)
        undo-strong-limit 3000000   ; 3mb   (default is 240kb)
        undo-outer-limit 48000000)  ; 48mb  (default is 24mb)
  )
#+end_src

* Workspaces

#+begin_src emacs-lisp
(defvar ar/persp-prev "main")

(defun ar/persp-switch (name)
  (setq ar/persp-prev (safe-persp-name (get-current-persp)))
  (persp-switch name))

(defun ar/persp-switch-to-main ()
  (interactive)
  (ar/persp-switch "main"))

(defun ar/persp-switch-back ()
  (interactive)
  (ar/persp-switch ar/persp-prev))

(use-package persp-mode
  :straight t
  :config
  (setq persp-auto-resume-time -1 ; Don't auto-load on startup
        persp-auto-save-opt 0 ; Don't auto-save
        persp-nil-name ar/persp-prev
        persp-set-last-persp-for-new-frames t
        )

  (global-set-key (kbd "s-1") #'ar/persp-switch-to-main)
  (global-set-key (kbd "s-p") #'persp-switch)
  (global-set-key (kbd "s-,") #'ar/persp-switch-back)
  ;; Running `persp-mode' multiple times resets the perspective list...
  (unless (equal persp-mode t)
    (persp-mode)))
#+end_src

* Projectile

#+begin_src emacs-lisp
(defun ar/switch-project-action ()
  (persp-switch (projectile-project-name))
  (magit-status))

(defun ar/project-buffer (name create-fn)
  (let* ((name (concat "*" (projectile-project-name) ":" name "*"))
         (buf (get-buffer name)))
    (if buf
        (switch-to-buffer buf)
     (funcall create-fn name))))

(use-package projectile
  :straight t
  :init
  (setq projectile-auto-discover nil
        projectile-enable-caching (not noninteractive)
        projectile-globally-ignored-files '(".DS_Store" "TAGS")
        projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o")
        projectile-kill-buffers-filter 'kill-only-files
        projectile-ignored-projects '("~/")
        projectile-git-use-fd nil
        projectile-git-submodule-command nil
        projectile-enable-caching nil
        projectile-indexing-method 'alien
        projectile-switch-project-action #'ar/switch-project-action)
  :config
  (cl-letf (((symbol-function 'projectile--cleanup-known-projects) #'ignore))
    (projectile-mode))

  (setq projectile-project-root-files-bottom-up
        '(".git")
        ;; This will be filled by other modules. We build this list manually so
        ;; projectile doesn't perform so many file checks every time it resolves
        ;; a project's root -- particularly when a file has no project.
        projectile-project-root-files '()
        projectile-project-root-files-top-down-recurring '("Makefile"))

  ;; Per-project compilation buffers
  (setq compilation-buffer-name-function #'projectile-compilation-buffer-name
        compilation-save-buffers-predicate #'projectile-current-project-buffer-p))
#+end_src

* Magit

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :config
  (setq transient-default-level 5
        magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1
        magit-diff-refine-hunk t ; show granular diffs in selected hunk
        ;; Don't autosave repo buffers. This is too magical, and saving can
        ;; trigger a bunch of unwanted side-effects, like save hooks and
        ;; formatters. Trust the user to know what they're doing.
        magit-save-repository-buffers nil
        ;; Don't display parent/related refs in commit buffers; they are rarely
        ;; helpful and only add to runtime costs.
        magit-revision-insert-related-refs nil)
  (add-hook 'magit-process-mode-hook #'goto-address-mode)
  (add-hook 'magit-popup-mode-hook #'hide-mode-line-mode)

  (defun +magit/quit (&optional kill-buffer)
    "Bury the current magit buffer.

  If KILL-BUFFER, kill this buffer instead of burying it.
  If the buried/killed magit buffer was the last magit buffer open for this repo,
  kill all magit buffers for this repo."
    (interactive "P")
    (let ((topdir (magit-toplevel)))
      (funcall magit-bury-buffer-function kill-buffer)
      (or (cl-find-if (lambda (win)
                        (with-selected-window win
                          (and (derived-mode-p 'magit-mode)
                              (equal magit--default-directory topdir))))
                      (window-list))
          (+magit/quit-all))))

  (defun +magit--kill-buffer (buf)
    "TODO"
    (when (and (bufferp buf) (buffer-live-p buf))
      (let ((process (get-buffer-process buf)))
        (if (not (processp process))
            (kill-buffer buf)
          (with-current-buffer buf
            (if (process-live-p process)
                (run-with-timer 5 nil #'+magit--kill-buffer buf)
              (kill-process process)
              (kill-buffer buf)))))))

  (defun +magit/quit-all ()
    "Kill all magit buffers for the current repository."
    (interactive)
    (mapc #'+magit--kill-buffer (magit-mode-get-buffers))
    (+magit-mark-stale-buffers-h))

  ;; (define-key magit-mode-map "q" #'+magit/quit)
  ;; (define-key magit-mode-map "Q" #'+magit/quit-all)

  ;; Close transient with ESC
  (define-key transient-map [escape] #'transient-quit-one)

  (evil-define-key* 'normal magit-status-mode-map [escape] nil)

  ;;(straight-use-package 'evil-collection-magit)
  ;; (require 'evil-collection-magit)
  ;; (evil-collection-magit-setup)
  ;; (require 'evil-collection-magit-section)

  (general-define-key
  :states '(normal visual emacs)
  :keymaps 'magit-mode-map
  "q" #'+magit/quit
  "Q" #'+magit/quit-all
  "]" #'magit-section-forward-sibling
  "[" #'magit-section-backward-sibling
  "gr" #'magit-refresh
  "gR" #'magit-refresh-all)
  ;; (general-def 'normal emacs-lisp-mode-map
  ;;   "K" 'elisp-slime-nav-describe-elisp-thing-at-point)

  ;; (map! (:map magit-mode-map
  ;;         :nv "q" #'+magit/quit
  ;;         :nv "Q" #'+magit/quit-all
  ;;         :nv "]" #'magit-section-forward-sibling
  ;;         :nv "[" #'magit-section-backward-sibling
  ;;         :nv "gr" #'magit-refresh
  ;;         :nv "gR" #'magit-refresh-all)
  ;;       (:map magit-status-mode-map
  ;;         :nv "gz" #'magit-refresh)
  ;;       (:map magit-diff-mode-map
  ;;         :nv "gd" #'magit-jump-to-diffstat-or-diff))
  )
#+end_src

* Drag Stuff

#+begin_src emacs-lisp
(use-package drag-stuff
  :straight t
  :config
  (general-define-key
   :states '(normal)
   "M-k" #'drag-stuff-up
   "M-j" #'drag-stuff-down))
#+end_src

* Javascript

#+begin_src emacs-lisp
;; (pushnew! projectile-project-root-files "package.json")
;; (pushnew! projectile-globally-ignored-directories "^node_modules$" "^flow-typed$"))

(use-package typescript-mode
  :straight t
  ;; :init
  ;; (add-to-list 'auto-mode-alist
  ;;              (cons "\\.tsx\\'" #'typescript-tsx-mode))
  )

(use-package rjsx-mode
  :straight t
  :config
  (setq js-chain-indent t
        ;; These have become standard in the JS community
        js2-basic-offset 2
        ;; Don't mishighlight shebang lines
        js2-skip-preprocessor-directives t
        ;; let flycheck handle this
        js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil
        ;; Flycheck provides these features, so disable them: conflicting with
        ;; the eslint settings.
        js2-strict-missing-semi-warning nil
        ;; maximum fontification
        js2-highlight-level 3
        js2-idle-timer-delay 0.15)
  )
#+end_src
* Ruby

#+begin_src emacs-lisp
(use-package ruby-mode)

(use-package rubocop
  :straight t
  :hook (ruby-mode . rubocop-mode))

(defvar ar/rspec-file)

(defun ar/rspec-run (&optional single)
  (interactive "P")
  (save-buffer)
  (let ((file (buffer-file-name)))
    (when (rspec-spec-file-p file)
      (setq ar/rspec-file
            (if single
                (cons file
                      (save-restriction
                        (widen)
                        (number-to-string (line-number-at-pos))))
              file)))
    (if ar/rspec-file
        (rspec-run-single-file ar/rspec-file (rspec-core-options))
      (message "No spec file"))))

(use-package rspec-mode
  :straight t
  :config
  (setq rspec-use-bundler-when-possible nil
        rspec-use-spring-when-possible nil
        rspec-spec-command "direnv exec . rspec"
        rspec-command-options (concat "--require "
                                      user-emacs-directory
                                      "emacs_formatter.rb --format EmacsFormatter")
        rspec-use-relative-path t)

  (general-define-key
   :states '(normal)
   :keymaps '(rspec-verifiable-mode-map rspec-mode-map)
   "RET" #'ar/rspec-run)

  (ar-leader-def
   :states '(normal)
   :keymaps '(rspec-verifiable-mode-map rspec-mode-map)
   "mtt" #'rspec-toggle-spec-and-target))

(use-package slim-mode
  :straight t)
#+end_src

* Completion

#+begin_src emacs-lisp
;; (straight-use-package 'consult)
;; (straight-use-package 'corfu-terminal)
;; (straight-use-package 'wgrep)

(use-package vertico
  :straight t
  :init
  (add-to-list 'load-path
              (expand-file-name "straight/build/vertico/extensions"
                                straight-base-dir))
  :config
  (setq vertico-resize nil
        vertico-count 17
        vertico-cycle t)
  ;; (require 'vertico-directory)
  (vertico-mode))

(use-package vertico-posframe
  :straight t
  :config
  (vertico-posframe-mode))

(use-package marginalia
  :straight t
  :config
  (setq marginalia-annotators '(marginalia-annotators-heavy
                                marginalia-annotators-light nil))

  (marginalia-mode 1))

(use-package orderless
  :straight t
  :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides nil))


(use-package embark
  :straight t
  :config
  ;; Use Embark to show bindings in a key prefix with `C-h`
  (setq prefix-help-command #'embark-prefix-help-command)

  (global-set-key [remap describe-bindings] #'embark-bindings)
  ;; (global-set-key (kbd "C-.") 'embark-act)
  )

(use-package embark-consult
  :straight t
  ;; :config
  ;; (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
  )

;;; Dabbrev

;; (require 'dabbrev)
;; (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

;; (defun ar/smart-tab ()
;;   (interactive)
;;   (if (< (current-column) (current-indentation))
;;       (funcall indent-line-function)
;;     ;; TODO: use (line-beginning-position 0)
;;     (let ((left (- (point) 1)))
;;       (if (or (< left (point-min))
;;               (= (char-after left) ?\n)
;;               (and (memq (char-after left) '(?\s ?\t))
;;                    (memq (char-after (- left 1)) '(?\n ?\s ?\t))))
;;           (insert-tab)
;;         (call-interactively 'dabbrev-expand)))))

;; (general-define-key
;;  :states '(insert)
;;  "TAB" #'ar/smart-tab)

;;; Cofru

(defun ar/set-basic-completion ()
  (setq-local completion-styles '(basic)))

(use-package corfu
  :straight t
  :init
  (add-to-list 'load-path
               (expand-file-name "straight/build/corfu/extensions"
                                 straight-base-dir))
  :config
  (setq corfu-cycle t ;; Allows cycling through candidates
        corfu-auto nil ;; Enable auto completion
        corfu-auto-prefix 3 ;; Complete with less prefix keys
        corfu-auto-delay 0 ;; No delay for completion
        corfu-preselect 'prompt ;; Always preselect the prompt
        corfu-popupinfo-delay 0.1
        corfu-popupinfo-hide nil
        corfu-echo-documentation 0.1) ;; Echo docs for current completion option
  (add-hook 'corfu-mode-hook #'ar/set-basic-completion)
  (require 'corfu-popupinfo)
  (corfu-popupinfo-mode)
  (global-corfu-mode))

;; (setq-local completion-styles '(basic))
;; (kill-local-variable 'completion-styles)
;; (setq completion-styles '(basic))
;; (orderless basic)

;; (define-key corfu-map (kbd "TAB") #'corfu-next)
;; (define-key corfu-map [tab] #'corfu-next)


(use-package kind-icon
  :straight t
  :config
  (setq kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

;; Cape for better completion-at-point support and more

(use-package cape
  :straight t
  :config
  (setq cape-dabbrev-min-length 2)

  ;; Add useful defaults completion sources from cape
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)

  ;; Silence the pcomplete capf, no errors or messages!
  ;; Important for corfu
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

(defun ar/indent-or-complete ()
  (interactive)
  (if (< (current-column) (current-indentation))
      (funcall indent-line-function)
    (let ((syn (syntax-after (- (point) 1))))
      (if (member 2 syn)
          (progn
            (completion-at-point)
            (corfu-complete))
        (insert-tab)))))

(general-define-key
 :states '(insert)
 "TAB" #'ar/indent-or-complete)
#+end_src

* Navigation

#+begin_src emacs-lisp
(use-package dumb-jump
  :straight t
  :config
  (setq dumb-jump-prefer-searcher 'rg
        dumb-jump-aggressive nil)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

* LSP

#+begin_src emacs-lisp
(use-package lsp-mode
  :straight t
  :config
  ;; Make breadcrumbs opt-in; they're redundant with the modeline and imenu
  (setq lsp-headerline-breadcrumb-enable nil)

  (setq lsp-eldoc-enable-hover nil)

  (setq lsp-signature-function 'ignore)
  (setq lsp-signature-render-documentation nil)

  (setq lsp-completion-provider :none) ;; we use Corfu!

  (defun ar/lsp-mode-setup-completion ()
    (setq-local completion-at-point-functions
                `(,(cape-super-capf
                    #'lsp-completion-at-point
                    #'cape-dabbrev)
                  cape-file))
    (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(basic)))
  (add-hook 'lsp-completion-mode-hook #'ar/lsp-mode-setup-completion)

  (defun ar/elisp-mode-setup-completion ()
    (setq-local completion-at-point-functions
                `(,(cape-super-capf
                    #'elisp-completion-at-point
                    #'cape-dabbrev)
                  cape-file)))
  (add-hook 'emacs-lisp-mode-hook #'ar/elisp-mode-setup-completion))
#+end_src

* Helpful

#+begin_src emacs-lisp
(use-package helpful
  :straight t)

(use-package elisp-demos
  :straight t
  :after helpful
  :config
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

* Terminal

#+begin_src emacs-lisp
(straight-use-package 'vterm)

(defun ar/setup-vterm-mode ()
  (setq-local
   ;; Don't prompt about dying processes when killing vterm
   confirm-kill-processes nil
   ;; Prevent premature horizontal scrolling
   hscroll-margin 0)
  (hide-mode-line-mode))
(add-hook 'vterm-mode-hook #'ar/setup-vterm-mode)

;; Once vterm is dead, the vterm buffer is useless. Why keep it around? We can
;; spawn another if want one.
(setq vterm-kill-buffer-on-exit t)

;; 5000 lines of scrollback, instead of 1000
(setq vterm-max-scrollback 5000)

(defun ar/vterm (&optional name)
  (interactive)
  (require 'vterm)
  (let ((project-root (projectile-project-root))
        (default-directory project-root)
        display-buffer-alist)
    (setenv "PROOT" project-root)
    (vterm (or name "*vterm*"))))
#+end_src

* Dired

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :straight t)

(use-package dired
  :config
  (setq dired-dwim-target t
        dired-hide-details-hide-symlink-targets nil
        ;; don't prompt to revert, just do it
        dired-auto-revert-buffer #'dired-buffer-stale-p
        ;; Always copy/delete recursively
        dired-recursive-copies  'always
        dired-recursive-deletes 'top
        ;; Ask whether destination dirs should get created when copying/removing files.
        dired-create-destination-dirs 'ask
        dired-listing-switches "-ahlo"
        dired-omit-files "\\`[.]?#"
        dired-kill-when-opening-new-dired-buffer t
        dired-no-confirm t
        dired-deletion-confirmer (lambda (x) t))
  )
#+end_src

* Modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :hook (after-init . doom-modeline-mode)
  :hook (doom-modeline-mode . column-number-mode)   ; cursor column in modeline
  :init
  ;; We display project info in the modeline ourselves
  (setq projectile-dynamic-mode-line nil)
  ;; Set these early so they don't trigger variable watchers
  (setq doom-modeline-bar-width 3
        doom-modeline-height 25
        doom-modeline-github nil
        doom-modeline-mu4e nil
        doom-modeline-persp-name nil
        doom-modeline-minor-modes nil
        doom-modeline-major-mode-icon nil
        doom-modeline-buffer-state-icon t
        doom-modeline-buffer-modification-icon t
        doom-modeline-buffer-file-name-style 'relative-from-project
        ;; Only show file encoding if it's non-UTF-8 and different line endings
        ;; than the current OSes preference
        doom-modeline-buffer-encoding 'nondefault
        doom-modeline-default-eol-type 2))
#+end_src

* Theme

#+begin_src emacs-lisp
(use-package doom-themes
  :straight t
  :config
  (setq custom-safe-themes '("75468dae04a878249fcebf0d2e1de092d6b655419f0ff28e23c603f041b53b4f"
                             "72a5764e266373b9584eebdc643f9214f763b7f9f53f362a4d25099345ee8838"
                             default)))

(use-package auto-dark
  :straight t
  :init
  (setq auto-dark-dark-theme 'ar-tomorrow-night
        auto-dark-light-theme 'ar-tomorrow-day)
  :config
  (advice-add 'auto-dark--set-theme :after
              (lambda (&rest r) (vertico-posframe-cleanup))
              '((name . "reset-vertico-posframe")))
  (auto-dark-mode))

(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)
(window-divider-mode)

(setq indicate-buffer-boundaries nil
      indicate-empty-lines nil)

(setq ring-bell-function 'ignore
      visible-bell nil)
#+end_src

* Dark Theme

#+begin_src emacs-lisp :tangle ar-tomorrow-night-theme.el
;;; ar-tomorrow-night-theme.el -*- lexical-binding: t; -*-

(require 'doom-themes)

(def-doom-theme ar-tomorrow-night
  "A theme based off of Chris Kempson's Tomorrow Dark."

  ;; name        gui       256       16
  ((bg         '("#1d1f21" nil       nil          ))
   (bg-alt     '("#161719" nil       nil          ))
   (base0      '("#0d0d0d" "black"   "black"      ))
   (base1      '("#1b1b1b" "#1b1b1b"              ))
   (base2      '("#212122" "#1e1e1e"              ))
   (base3      '("#292b2b" "#292929" "brightblack"))
   (base4      '("#3f4040" "#3f3f3f" "brightblack"))
   (base5      '("#5c5e5e" "#525252" "brightblack"))
   (base6      '("#757878" "#6b6b6b" "brightblack"))
   (base7      '("#969896" "#979797" "brightblack"))
   (base8      '("#ffffff" "#ffffff" "white"      ))
   (fg         '("#c5c8c6" "#c5c5c5" "white"))
   (fg-alt     (doom-darken fg 0.4))

   (grey       '("#5a5b5a" "#5a5a5a" "brightblack"))
   (red        '("#cc6666" "#cc6666" "red"))
   (orange     '("#de935f" "#dd9955" "brightred"))
   (yellow     '("#f0c674" "#f0c674" "yellow"))
   (green      '("#b5bd68" "#b5bd68" "green"))
   (blue       '("#81a2be" "#88aabb" "brightblue"))
   (dark-blue  '("#41728e" "#41728e" "blue"))
   (teal       blue) ; FIXME replace with real teal
   (magenta    '("#c9b4cf" "#c9b4cf" "magenta"))
   (violet     '("#b294bb" "#b294bb" "brightmagenta"))
   (cyan       '("#8abeb7" "#8abeb7" "cyan"))
   (dark-cyan  (doom-darken cyan 0.4))

   ;; face categories
   (highlight      blue)
   (vertical-bar   base0)
   (selection      `(,(car (doom-lighten bg 0.1)) ,@(cdr base4)))
   (builtin        blue)
   (comments       grey)
   (doc-comments   (doom-lighten grey 0.14))
   (constants      orange)
   (functions      blue)
   (keywords       violet)
   (methods        blue)
   (operators      fg)
   (type           yellow)
   (strings        green)
   (variables      red)
   (numbers        orange)
   (region         selection)
   (error          red)
   (warning        yellow)
   (success
green)
   (vc-modified    fg-alt)
   (vc-added       green)
   (vc-deleted     red)

   ;; custom categories
   (modeline-bg     `(,(doom-darken (car bg-alt) 0.3) ,@(cdr base3)))
   (modeline-bg-alt `(,(car bg) ,@(cdr base1)))
   (modeline-fg     base8)
   (modeline-fg-alt comments)
   (-modeline-pad   nil))

  ;; --- faces ------------------------------
  (((line-number &override) :foreground base4 :italic nil)
   ((line-number-current-line &override) :foreground base7 :bold bold :italic nil)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-alt :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt)))

   ;;;; magit
   ((magit-diff-added-highlight &override) :bold nil)
   ((magit-diff-removed-highlight &override) :bold nil)
   (diff-refine-added :inverse-video nil :bold t :foreground "#d6de91")
   (diff-refine-removed :inverse-video nil :bold t :foreground "#e88380")
   ((magit-header-line &override) :box `(:line-width 3 :color ,bg) :foreground fg :background bg)

   ;;;; vertico
   (vertico-posframe-border :background base5)

   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face :foreground violet)
   (rainbow-delimiters-depth-2-face :foreground blue)
   (rainbow-delimiters-depth-3-face :foreground orange)
   (rainbow-delimiters-depth-4-face :foreground green)
   (rainbow-delimiters-depth-5-face :foreground magenta)
   (rainbow-delimiters-depth-6-face :foreground yellow)
   (rainbow-delimiters-depth-7-face :foreground teal)

   ;;;; doom-modeline
   (doom-modeline-buffer-path       :foreground violet :bold bold)
   (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path))

  ;; --- variables --------------------------
  ;; ()
  )

#+end_src

* Light Theme

#+begin_src emacs-lisp :tangle ar-tomorrow-day-theme.el
;;; themes/ar-tomorrow-day-theme.el -*- lexical-binding: t; -*-

(require 'doom-themes)

(def-doom-theme ar-tomorrow-day
  "A light theme based off of Chris Kempson's Tomorrow Dark."

  ;; name        gui       256       16
  ((bg         '("#ffffff" "white"   "white" ))
   (bg-alt     '("#f2f2f2" nil       nil     ))
   (base0      '("#f2f2f2" "white"   "white" ))
   (base1      '("#e4e4e4" "#e4e4e4"         ))
   (base2      '("#dedede" "#cccccc"         ))
   (base3      '("#d6d4d4" "#cccccc" "silver"))
   (base4      '("#C0bfbf" "#c0c0c0" "silver"))
   (base5      '("#a3a1a1" "#adadad" "silver"))
   (base6      '("#8a8787" "#949494" "silver"))
   (base7      '("#696769" "#6b6b6b" "silver"))
   (base8      '("#000000" "#000000" "black" ))
   (fg         '("#4d4d4c" "#3a3a3a" "black"))
   (fg-alt     (doom-darken fg 0.6))

   (grey       '("#8e908c" "#999999" "silver"))
   ;; (red        '("#c82829" "#cc3333" "red"))
   (red        '("#ad353d" "#cc3333" "red"))
   ;; (orange     '("#f5871f" "#ff9933" "brightred"))
   ;; (orange     '("#d4741b" "#ff9933" "brightred"))
   ;; (orange     '("#bc793b" "#ff9933" "brightred"))
   (orange     '("#c0913b" "#ff9933" "brightred"))
   (yellow     '("#eab700" "#ffcc00" "yellow"))
   (dark-yellow '("#9b8e3b" "#ffcc00" "yellow"))
   ;; (green      '("#718c00" "#669900" "green"))
   (green      '("#6b8501" "#669900" "green"))
   ;; (blue       '("#4271ae" "#339999" "brightblue"))
   (blue       '("#3b649b" "#339999" "brightblue"))
   (dark-blue  (doom-darken blue 0.25))
   (teal       '("#3e999f" "#339999" "brightblue"))
   ;; (magenta    '("#c678dd" "#c9b4cf" "magenta"))
   (magenta    '("#9e60b1" "#c9b4cf" "magenta"))

   ;; (violet     '("#8959a8" "#996699" "brightmagenta"))
   ;; (violet     '("#744B8F" "#996699" "brightmagenta"))
   (violet     '("#7d519a" "#996699" "brightmagenta"))
   (cyan       '("#8abeb7" "#8abeb7" "cyan"))
   (dark-cyan  (doom-lighten cyan 0.4))

   ;; face categories
   (highlight      blue)
   (vertical-bar   base3)
   (selection      base1)
   (builtin        blue)
   (comments       grey)
   (doc-comments   grey)
   (constants      orange)
   (functions      blue)
   (keywords       violet)
   (methods        blue)
   (operators      fg)
   (type           dark-yellow);;(doom-darken yellow 0.5))
   (strings        green)
   (variables      red)
   (numbers        orange)
   (region         selection)
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    (doom-lighten yellow 0.4))
   (vc-added       (doom-lighten green 0.4))
   (vc-deleted     red)

   ;; custom categories
   (org-block-bg             (doom-lighten bg-alt 0.3))
   (modeline-bg              `(,(doom-lighten (car bg-alt) 0.4) ,@(cdr base3)))
   (modeline-bg-alt          bg)
   (modeline-bg-inactive     `(,(doom-darken (car bg) 0.04) ,@(cdr base1)))
   (modeline-bg-alt-inactive bg)
   (modeline-fg              fg)
   (modeline-fg-inactive     comments)
   (modeline-fg-alt-inactive comments)
   (-modeline-pad            nil))

  ;;;; Base theme face overrides
  (;;((font-lock-doc-face &override) :slant 'italic)
   ((line-number &override) :foreground base4 :italic nil)
   ((line-number-current-line &override) :foreground base8 :italic nil)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-inactive
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-highlight :inherit 'bold :background highlight :foreground base0)

   ;;;; magit
   ((magit-diff-context &override) :background "#f6f6f6")
   ((magit-diff-context-highlight &override) :background "#ffffff")
   ((magit-diff-added &override) :foreground "#6b8501" :background "#f6f7ef")
   ((magit-diff-removed &override) :foreground "#a44f56" :background "#fbf3f3")
   ((magit-diff-added-highlight &override) :bold nil :foreground "#6b8501" :background "#f6f7ef")
   ((magit-diff-removed-highlight &override) :bold nil :foreground "#a44f56" :background "#fbf3f3")
   ((magit-header-line &override) :box `(:line-width 3 :color ,bg) :foreground fg :background bg)

   (diff-refine-added :inverse-video nil :bold t :foreground "#6b8501" :background "#f6f7ef")
   (diff-refine-removed :inverse-video nil :bold t :foreground "#a44f56" :background "#fbf3f3")

   ;;;; doom-modeline
   (doom-modeline-bar :background highlight)
   (doom-modeline-buffer-path       :foreground violet :weight 'bold)
   (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path)

   ;;;; vertico
   (vertico-posframe-border :background base4)

   ;;;; ivy
   (ivy-current-match :background region :distant-foreground grey :weight 'ultra-bold)
   (ivy-minibuffer-match-face-1 :foreground base5 :weight 'light)
   (ivy-minibuffer-match-face-2 :inherit 'ivy-minibuffer-match-face-1 :foreground violet :weight 'ultra-bold)
   (ivy-minibuffer-match-face-3 :inherit 'ivy-minibuffer-match-face-2 :foreground blue)
   (ivy-minibuffer-match-face-4 :inherit 'ivy-minibuffer-match-face-2 :foreground red)

   ;;;; org <built-in>
   ((org-block &override)            :background org-block-bg)
   ((org-block-background &override) :background org-block-bg)
   ((org-block-begin-line &override) :background org-block-bg)
   ((org-quote &override)            :background org-block-bg)

   ;;;; outline <built-in>
   ((outline-1 &override) :foreground teal)
   ((outline-2 &override) :foreground blue)
   ((outline-3 &override) :foreground violet)
   ((outline-4 &override) :foreground blue)
   ((outline-5 &override) :foreground violet)
   ((outline-6 &override) :foreground blue)
   ((outline-7 &override) :foreground violet)
   ((outline-8 &override) :foreground blue)

   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face :foreground violet)
   (rainbow-delimiters-depth-2-face :foreground blue)
   (rainbow-delimiters-depth-3-face :foreground green)
   (rainbow-delimiters-depth-4-face :foreground magenta)
   (rainbow-delimiters-depth-5-face :foreground orange)
   (rainbow-delimiters-depth-6-face :foreground yellow)
   (rainbow-delimiters-depth-7-face :foreground teal)

   ;;;; solaire-mode
   (solaire-mode-line-face :inherit 'mode-line :background modeline-bg-alt)
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-alt-inactive
    :foreground modeline-fg-alt-inactive)

   ;;;; treemacs
   (treemacs-git-untracked-face :foreground yellow)

   ;;;; whitespace <built-in>
   (whitespace-tab :background (doom-lighten base0 0.6)
                   :foreground comments))

  ;; --- variables --------------------------
  ;; ()
  )
#+end_src

* GC

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
