#+property: header-args:emacs-lisp :tangle config.el
#+startup: overview
#+title: Doom Emacs Config

* Doom
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

;; (add-to-list 'default-frame-alist '(undecorated . t))

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe); the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;(ivy +fuzzy)        ; a search engine for love and life
       vertico             ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)    ; 🙂
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       ;;(vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ;;ibuffer           ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe); tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)         ; M-x vscode
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf                 ; pdf enhancements
       prodigy             ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter         ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       (clojure +lsp)      ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +lsp +unity); unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +pomodoro +roam2 +dragndrop +pretty) ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       (ruby +rails +lsp)
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       (swift +lsp)        ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web                 ; the tubes
       yaml                ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* Packages
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

(package! slim-mode)
;; (package! command-log-mode)
;; (package! fzf)
;; (package! helm-fzf
;;   :recipe (:host github :repo "ibmandura/helm-fzf"))
(package! dired-hide-dotfiles)
(package! org-alert)
;; (package! org-wild-notifier)
;; (package! org-trello
;;   :recipe (:host github :repo "yalexwander/org-trello"))
(package! auto-dark)
;; (package! mixed-pitch)
(package! svg-lib)
;; (package! org-drill)
;; (package! unity)
;; (package! poly-slim)
;; (package! graphviz-dot-mode)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

(package! evil-escape :disable t)
(package! mu4e-alert :disable t)
(package! highlight-numbers :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

* Header
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

#+end_src

* General config
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src emacs-lisp
(setq user-full-name "Anton Rogov"
      user-mail-address "anton@blackbits.pro")
#+end_src

#+begin_src emacs-lisp

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

(set-frame-size nil 200 50)     ;; Pick values matching your screen.

(setq ispell-program-name "aspell")

(setq custom-tab-width 2)

;; (setq standard-indent custom-tab-width
;;       tab-width custom-tab-width)

(setq-default standard-indent custom-tab-width)
(setq-default tab-width custom-tab-width)
(setq-default js-indent-level custom-tab-width)
(setq-default typescript-indent-level custom-tab-width)

(setq-hook! '(web-mode-local-vars-hook
              css-mode-local-vars-hook
              scss-mode-local-vars-hook
              sass-mode-local-vars-hook
              less-css-mode-local-vars-hook)
  tab-width custom-tab-width
  css-indent-offset custom-tab-width
  web-mode-css-indent-offset custom-tab-width
  web-mode-markup-indent-offset custom-tab-width)

;; (after! css-mode
;;   (setq! css-indent-offset custom-tab-width))
#+end_src

* Javascript
#+begin_src emacs-lisp
(after! js-mode
  (setq! js-indent-level custom-tab-width))

(after! typescript-mode
  (setq typescript-indent-level custom-tab-width))
#+end_src

Explicitly call use-package for js2-mode to override rjsx-mode for .js files. Maybe there's a better way to do that.

#+begin_src emacs-lisp
(use-package! js2-mode
  :mode "\\.js\\'"
  :mode "\\.es6\\'"
  :mode "\\.pac\\'"
  :interpreter "node"
  :hook (js2-mode . rainbow-delimiters-mode)
  :init
  ;; Parse node stack traces in the compilation buffer
  (after! compilation
    (add-to-list 'compilation-error-regexp-alist 'node)
    (add-to-list 'compilation-error-regexp-alist-alist
                 '(node "^[[:blank:]]*at \\(.*(\\|\\)\\(.+?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)"
                        2 3 4)))
  :config
  (set-repl-handler! 'js2-mode #'+javascript/open-repl)
  (set-electric! 'js2-mode :chars '(?\} ?\) ?. ?:))

  (setq js-chain-indent t
        ;; These have become standard in the JS community
        js2-basic-offset custom-tab-width
        ;; Don't mishighlight shebang lines
        js2-skip-preprocessor-directives t
        ;; let flycheck handle this
        js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil
        ;; Flycheck provides these features, so disable them: conflicting with
        ;; the eslint settings.
        js2-strict-missing-semi-warning nil
        ;; maximum fontification
        js2-highlight-level 3
        js2-idle-timer-delay 0.15)

  (setq-hook! 'js2-mode-hook
    ;; Indent switch-case another step
    evil-shift-width js2-basic-offset
    js-switch-indent-offset js2-basic-offset)

  (use-package! xref-js2
    :when (modulep! :tools lookup)
    :init
    (setq xref-js2-search-program 'rg)
    (set-lookup-handlers! 'js2-mode
      :xref-backend #'xref-js2-xref-backend)))

(add-hook! 'js2-mode-local-vars-hook #'+javascript-init-lsp-or-tide-maybe-h)
#+end_src

* LSP
#+begin_src emacs-lisp

(defun dap-mode (&rest arg) t)
(defun dap-auto-configure-mode (&rest arg) t)

(after! lsp-mode
  (setq! lsp-enable-file-watchers nil
         lsp-ui-sideline-enable nil
         lsp-ui-doc-enable nil
         lsp-ui-doc-border "#aaaaaa"
         lsp-ui-doc-max-height 100
         lsp-ui-doc-include-signature t
         lsp-ui-doc--hide-on-next-command t
         lsp-headerline-breadcrumb-enable nil
         lsp-headerline-breadcrumb-segments '(symbols)
         lsp-headerline-breadcrumb-enable-diagnostics nil)

  (defun ar/lsp-headerline--arrow-icon ()
    (or
     lsp-headerline-arrow
     (setq lsp-headerline-arrow
           (let ((all-the-icons-scale-factor 1.0)
                 (all-the-icons-default-adjust -0.2))
             (lsp-icons-all-the-icons-material-icon
              "chevron_right"
              'lsp-headerline-breadcrumb-separator-face
              ">"
              'headerline-breadcrumb)))))

  (advice-add #'lsp-headerline--arrow-icon :override #'ar/lsp-headerline--arrow-icon)

  (defun ar/lsp-headerline--symbol-icon (kind)
    (string))

  (advice-add #'lsp-headerline--symbol-icon :override #'ar/lsp-headerline--symbol-icon)
  ;; (let ((all-the-icons-scale-factor 1.0)
  ;;       (all-the-icons-default-adjust -0.075))
  ;;   (concat
  ;;    (all-the-icons-material "code" :face 'lsp-headerline-breadcrumb-symbol-face)
  ;;    " ")))

  (setq lsp-solargraph-multi-root nil
        lsp-solargraph-library-directories
        '("~/.rbenv/" "/usr/lib/ruby/" "~/.rvm/" "~/.gem/" "/opt/homebrew/lib/ruby/" "~/.rubies/"
          "~/code/trading/.gem/"
          "~/code/blackbits/pomodoro/.gem/"
          "~/code/forecast/mountain/.gem/"
          "~/code/forecast/snow/.gem/"))

  (defun lsp-solargraph--build-command ()
    '("direnv" "exec" "." "solargraph" "stdio"))
  ;; '("/Library/Ruby/Gems/2.6.0/gems/solargraph-0.48.0/bin/solargraph" "stdio"))
  ;; '("/Users/anton/bin/solargraph"))

  (map! :m "gh" #'lsp-ui-doc-show)

  (remove-hook! 'lsp-completion-mode-hook #'+lsp-init-company-backends-h)

  (advice-remove #'lsp--auto-configure #'+lsp--use-hook-instead-a)

  ;;   (defun ar/lsp-ui-sideline--diagnostics (buffer bol eol)
  ;;     "Show diagnostics belonging to the current line.
  ;; Loop over flycheck errors with `flycheck-overlay-errors-in'.
  ;; Find appropriate position for sideline overlays with `lsp-ui-sideline--find-line'.
  ;; Push sideline overlays on `lsp-ui-sideline--ovs'."
  ;;     (when (and (bound-and-true-p flycheck-mode)
  ;;                (bound-and-true-p lsp-ui-sideline-mode)
  ;;                lsp-ui-sideline-show-diagnostics
  ;;                (eq (current-buffer) buffer))
  ;;       (lsp-ui-sideline--delete-kind 'diagnostics)
  ;;       (dolist (e (flycheck-overlay-errors-in bol (1+ eol)))
  ;;         ;; add ■
  ;;         (let* ((lines (--> (concat " ■ " (flycheck-error-format-message-and-id e))
  ;;                            (split-string it "\n")
  ;;                            (lsp-ui-sideline--split-long-lines it)))
  ;;                (display-lines (butlast lines (- (length lines) lsp-ui-sideline-diagnostic-max-lines)))
  ;;                (offset 1))
  ;;           (dolist (line (nreverse display-lines))
  ;;             (let* ((msg (string-trim (replace-regexp-in-string "[\t ]+" " " line)))
  ;;                    (msg (replace-regexp-in-string " " " " msg))
  ;;                    (len (length msg))
  ;;                    (level (flycheck-error-level e))
  ;;                    ;; handle lsp-flycheck-info-unnecessary
  ;;                    (face (cond ((eq level 'info) 'success)
  ;;                                ((string-equal (symbol-name level) "lsp-flycheck-info-unnecessary")
  ;;                                 'font-lock-constant-face)
  ;;                                (t level)))
  ;;                    (margin (lsp-ui-sideline--margin-width))
  ;;                    (msg (progn (add-face-text-property 0 len 'lsp-ui-sideline-global nil msg)
  ;;                                (add-face-text-property 0 len face nil msg)
  ;;                                msg))
  ;;                    (string (concat (propertize " " 'display `(space :align-to (- right-fringe ,(lsp-ui-sideline--align len margin))))
  ;;                                    (propertize msg 'display (lsp-ui-sideline--compute-height))))
  ;;                    (pos-ov (lsp-ui-sideline--find-line len bol eol t offset))
  ;;                    (ov (and pos-ov (make-overlay (car pos-ov) (car pos-ov)))))
  ;;               (when pos-ov
  ;;                 (setq offset (1+ (car (cdr pos-ov))))
  ;;                 (overlay-put ov 'after-string string)
  ;;                 (overlay-put ov 'kind 'diagnostics)
  ;;                 (overlay-put ov 'before-string " ")
  ;;                 (overlay-put ov 'position (car pos-ov))
  ;;                 (push ov lsp-ui-sideline--ovs))))))))
  ;;   (advice-add #'lsp-ui-sideline--diagnostics :override #'ar/lsp-ui-sideline--diagnostics)

  ;; (defun ar/flycheck-error-format-message-and-id (orig &rest args)
  ;;   (message "%s" args)
  ;;   (concat " ■ " (apply orig args)))
  ;; (advice-add 'flycheck-error-format-message-and-id :around #'ar/flycheck-error-format-message-and-id)
  )
#+end_src
;; (byte-recompile-directory "/Users/anton/.emacs.d/.local/straight/build-28.2/lsp-ui" nil t)

* Company
#+begin_src emacs-lisp
(set-company-backend!
  'text-mode
  '(:separate company-yasnippet))

(set-company-backend!
  '(js2-mode typescript-mode)
  '(company-dabbrev-code company-yasnippet company-capf :separate))

(set-company-backend!
  '(ruby-mode robe-mode)
  '(company-robe company-capf company-dabbrev-code company-yasnippet :separate))

;; (custom-set-faces!
;;   '(child-frame-border :background "#aaaaaa"))
(custom-set-faces
 '(child-frame-border ((t (:background "#aaaaaa")))))

(after! company
  (setq company-idle-delay 0
        company-selection-wrap-around t
        company-dabbrev-code-ignore-case t
        company-format-margin-function nil ;;'company-dot-icons-margin
        company-dot-icons-format " ■ "
        company-transformers '(delete-dups)))

(add-hook! 'evil-insert-state-exit-hook #'company-abort)

(after! company-box
  (setq company-box-doc-delay 0.1
        company-box-enable-icon nil
        company-box-doc-frame-parameters '((internal-border-width . 1)))

  (defun ar/company-box-doc--make-buffer (object)
    (let* ((buffer-list-update-hook nil)
           (inhibit-modification-hooks t)
           (string (cond ((stringp object) object)
                         ((bufferp object) (with-current-buffer object (buffer-string))))))
      (when (and string (> (length (string-trim string)) 0))
        (with-current-buffer (company-box--get-buffer "doc")
          (erase-buffer)
          (insert (concat " " (string-replace "\n" " \n " string) " "))
          (setq mode-line-format nil
                display-line-numbers nil
                header-line-format nil
                show-trailing-whitespace nil
                cursor-in-non-selected-windows nil)
          (current-buffer)))))
  (advice-add #'company-box-doc--make-buffer :override #'ar/company-box-doc--make-buffer))

;; (defvar ar/company-box-selected nil)

;; (defun company-box-frontend (command)
;;   (message "%s" command)
;;   (cond
;;    ((eq command 'hide)
;;     (company-box-hide))
;;    ((and (equal company-candidates-length 1)
;;          (company-box--hide-single-candidate))
;;     (company-box-hide))
;;    ((eq command 'show)
;;     (company-box-show))
;;    ((eq command 'update)
;;     (company-box--update))
;;    ((eq command 'select-mouse)
;;     (company-box--select-mouse))
;;    ;; ((eq command 'pre-command)
;;    ;;  (message "%s" (this-command-keys))
;;    ;;  (if (string-equal (this-command-keys) "TAB")
;;    ;;      (setq ar/company-box-selected t)
;;    ;;    (when (and ar/company-box-selected
;;    ;;               company-selection
;;    ;;               (not (company--company-command-p (this-command-keys))))
;;    ;;      (company--unread-this-command-keys)
;;    ;;      (setq ar/company-box-selected nil)
;;    ;;      (setq this-command 'company-complete-selection))))
;; ;; ((eq command 'post-command)
;; ;;  (company-box--post-command))
;; ))
#+end_src

#+begin_src emacs-lisp :tangle no
;; (delete-frame (frame-local-getq company-box-doc-frame))
(after! company
  (setq company-idle-delay nil
        company-selection-wrap-around t
        company-dabbrev-code-everywhere t
        dabbrev-case-fold-search t)

  (defun ar/company-select-next (&optional arg)
    (interactive "p")
    (when (company-manual-begin)
      (let ((selection (+ (or arg 1)
                          (or company-selection
                              company-selection-default
                              -1))))
        (company-set-selection selection))))

  (defun ar/company-complete-common ()
    (company-complete-common)
    (company-select-next))

  (defun ar/company-indent-or-complete-common (arg)
    "Indent the current line or region, or complete the common part."
    (interactive "P")
    (cond
     ((use-region-p)
      (indent-region (region-beginning) (region-end)))
     ((memq indent-line-function
            '(indent-relative indent-relative-maybe))
      (ar/company-complete-common))
     ((let ((old-point (point))
            (old-tick (buffer-chars-modified-tick))
            (tab-always-indent t))
        (indent-for-tab-command arg)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ar/company-complete-common))))))

  (advice-add #'company-indent-or-complete-common :override #'ar/company-indent-or-complete-common))

(after! (company-mode lsp)
  (setq lsp-company-backends
        '(:separate company-capf company-dabbrev-code company-yasnippet)))
#+end_src

* Smart tab
#+begin_src emacs-lisp
(defun ar/tab-command ()
  (interactive)
  (if (< (current-column) (current-indentation))
      ;;     (or (not (eq (indent--funcall-widened indent-line-function) 'noindent))
      ;;         (indent--default-inside-comment)
      ;;         (when (or (<= (current-column) (current-indentation))
      ;;                   (not (eq tab-always-indent 'complete)))
      ;;           (indent--funcall-widened (default-value 'indent-line-function))))
      (funcall indent-line-function)
    ;; TODO: use (line-beginning-position 0)
    (let ((left (- (point) 1)))
      (if (or (< left (point-min))
              (= (char-after left) ?\n)
              (and (= (char-after left) ?\s)
                   (memq (char-after (- left 1)) '(?\n ?\s))))
          (insert-tab)
        (evil-complete-previous)))))

(map! :i [tab] #'ar/tab-command)
;; (map! :map company-active-map [tab] #'ar/tab-complete)
(map! :map vterm-mode-map :i [tab] #'vterm-send-tab)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
- `doom-font'
- `doom-variable-pitch-font'
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

#+begin_src emacs-lisp
(defun ar/set-font-size (size)
  (setq ar/font-size size
        doom-font (font-spec :family "Inconsolata LGC" :size size)
        doom-variable-pitch-font (font-spec :family "Inconsolata LGC" :size size)
        doom-unicode-font (font-spec :family "Inconsolata LGC" :size size)
        doom-font-increment 1
        truncate-string-ellipsis "…"))

(defun ar/change-font-size (size)
  (ar/set-font-size size)
  (doom/reload-font))

(ar/set-font-size 12)
#+end_src

** unicode and variable pitch experiments
#+begin_src emacs-lisp :tangle no
;; doom-big-font (font-spec :family "Inconsolata LGC" :size 18)
;; doom-variable-pitch-font (font-spec :family "Inconsolata LGC" :size 12)
;; doom-variable-pitch-font (font-spec :family "ETBembo" :size 14)
;; doom-variable-pitch-font (font-spec :family "Helvetica Neue" :size 14)
;; doom-serif-font (font-spec :family "Inconsolata LGC" :size 12)

;; (after! unicode-fonts
;;   (dolist (unicode-block '("Cyrillic"
;;                            "Cyrillic Extended-A"
;;                            "Cyrillic Extended-B"
;;                            "Cyrillic Supplement"))
;;       (push "Inconsolata LGC" (cadr (assoc unicode-block unicode-fonts-block-font-mapping)))))

;; (set-default line-spacing 0.2)
#+end_src

* Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
;; (setq doom-theme 'doom-gruvbox
;;       doom-gruvbox-dark-variant "hard"
;;       doom-gruvbox-light-variant "hard")

#+begin_src emacs-lisp
(setq! auto-dark-dark-theme 'ar-tomorrow-night
       auto-dark-light-theme 'ar-tomorrow-day)
(setq doom-theme auto-dark-light-theme)

(defun ar/theme-changed ()
  (doom/reload-font)
  (set-face-attribute 'org-document-title nil :font "Inconsolata LGC 24"))

(use-package auto-dark
  :init
  (auto-dark-mode t)
  :config
  (add-hook! 'auto-dark-dark-mode-hook #'ar/theme-changed)
  (add-hook! 'auto-dark-light-mode-hook #'ar/theme-changed))
#+end_src

Other cool themes:
- dark: 'doom-oceanic-next 'doom-peacock 'doom-opera 'doom-sourcerer 'doom-spacegray
- light: 'doom-opera-light

#+begin_src emacs-lisp :tangle themes/ar-tomorrow-night-theme.el
;;; ar-tomorrow-night-theme.el -*- lexical-binding: t; -*-

(require 'doom-themes)

(def-doom-theme ar-tomorrow-night
  "A theme based off of Chris Kempson's Tomorrow Dark."

  ;; name        gui       256       16
  ((bg         '("#1d1f21" nil       nil          ))
   (bg-alt     '("#161719" nil       nil          ))
   (base0      '("#0d0d0d" "black"   "black"      ))
   (base1      '("#1b1b1b" "#1b1b1b"              ))
   (base2      '("#212122" "#1e1e1e"              ))
   (base3      '("#292b2b" "#292929" "brightblack"))
   (base4      '("#3f4040" "#3f3f3f" "brightblack"))
   (base5      '("#5c5e5e" "#525252" "brightblack"))
   (base6      '("#757878" "#6b6b6b" "brightblack"))
   (base7      '("#969896" "#979797" "brightblack"))
   (base8      '("#ffffff" "#ffffff" "white"      ))
   (fg         '("#c5c8c6" "#c5c5c5" "white"))
   (fg-alt     (doom-darken fg 0.4))

   (grey       '("#5a5b5a" "#5a5a5a" "brightblack"))
   (red        '("#cc6666" "#cc6666" "red"))
   (orange     '("#de935f" "#dd9955" "brightred"))
   (yellow     '("#f0c674" "#f0c674" "yellow"))
   (green      '("#b5bd68" "#b5bd68" "green"))
   (blue       '("#81a2be" "#88aabb" "brightblue"))
   (dark-blue  '("#41728e" "#41728e" "blue"))
   (teal       blue) ; FIXME replace with real teal
   (magenta    '("#c9b4cf" "#c9b4cf" "magenta"))
   (violet     '("#b294bb" "#b294bb" "brightmagenta"))
   (cyan       '("#8abeb7" "#8abeb7" "cyan"))
   (dark-cyan  (doom-darken cyan 0.4))

   ;; face categories
   (highlight      blue)
   (vertical-bar   base0)
   (selection      `(,(car (doom-lighten bg 0.1)) ,@(cdr base4)))
   (builtin        blue)
   (comments       grey)
   (doc-comments   (doom-lighten grey 0.14))
   (constants      orange)
   (functions      blue)
   (keywords       violet)
   (methods        blue)
   (operators      fg)
   (type           yellow)
   (strings        green)
   (variables      red)
   (numbers        orange)
   (region         selection)
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    fg-alt)
   (vc-added       green)
   (vc-deleted     red)

   ;; custom categories
   (modeline-bg     `(,(doom-darken (car bg-alt) 0.3) ,@(cdr base3)))
   (modeline-bg-alt `(,(car bg) ,@(cdr base1)))
   (modeline-fg     base8)
   (modeline-fg-alt comments)
   (-modeline-pad   nil))

  ;; --- faces ------------------------------
  (((line-number &override) :foreground base4 :italic nil)
   ((line-number-current-line &override) :foreground base7 :bold bold :italic nil)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-alt :foreground modeline-fg-alt
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-alt)))

   ;;;; magit
  ((magit-diff-added-highlight &override) :bold nil)
  ((magit-diff-removed-highlight &override) :bold nil)
  (diff-refine-added :inverse-video nil :bold t :foreground "#d6de91");; :background "#3b3e2f")
  (diff-refine-removed :inverse-video nil :bold t :foreground "#e88380");; :background "#493636")

   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face :foreground violet)
   (rainbow-delimiters-depth-2-face :foreground blue)
   (rainbow-delimiters-depth-3-face :foreground orange)
   (rainbow-delimiters-depth-4-face :foreground green)
   (rainbow-delimiters-depth-5-face :foreground magenta)
   (rainbow-delimiters-depth-6-face :foreground yellow)
   (rainbow-delimiters-depth-7-face :foreground teal)
   ;;;; doom-modeline
   (doom-modeline-buffer-path       :foreground violet :bold bold)
   (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path))

  ;; --- variables --------------------------
  ;; ()
  )

#+end_src

#+begin_src emacs-lisp :tangle themes/ar-tomorrow-day-theme.el
;;; themes/ar-tomorrow-day-theme.el -*- lexical-binding: t; -*-

(require 'doom-themes)

(def-doom-theme ar-tomorrow-day
  "A light theme based off of Chris Kempson's Tomorrow Dark."

  ;; name        gui       256       16
  ((bg         '("#ffffff" "white"   "white" ))
   (bg-alt     '("#f2f2f2" nil       nil     ))
   (base0      '("#f2f2f2" "white"   "white" ))
   (base1      '("#e4e4e4" "#e4e4e4"         ))
   (base2      '("#dedede" "#cccccc"         ))
   (base3      '("#d6d4d4" "#cccccc" "silver"))
   (base4      '("#C0bfbf" "#c0c0c0" "silver"))
   (base5      '("#a3a1a1" "#adadad" "silver"))
   (base6      '("#8a8787" "#949494" "silver"))
   (base7      '("#696769" "#6b6b6b" "silver"))
   (base8      '("#000000" "#000000" "black" ))
   (fg         '("#4d4d4c" "#3a3a3a" "black"))
   (fg-alt     (doom-darken fg 0.6))

   (grey       '("#8e908c" "#999999" "silver"))
   ;; (red        '("#c82829" "#cc3333" "red"))
   (red        '("#ad353d" "#cc3333" "red"))
   ;; (orange     '("#f5871f" "#ff9933" "brightred"))
   ;; (orange     '("#d4741b" "#ff9933" "brightred"))
   ;; (orange     '("#bc793b" "#ff9933" "brightred"))
   (orange     '("#c0913b" "#ff9933" "brightred"))
   (yellow     '("#eab700" "#ffcc00" "yellow"))
   (dark-yellow '("#9b8e3b" "#ffcc00" "yellow"))
   ;; (green      '("#718c00" "#669900" "green"))
   (green      '("#6b8501" "#669900" "green"))
   ;; (blue       '("#4271ae" "#339999" "brightblue"))
   (blue       '("#3b649b" "#339999" "brightblue"))
   (dark-blue  (doom-darken blue 0.25))
   (teal       '("#3e999f" "#339999" "brightblue"))
   ;; (magenta    '("#c678dd" "#c9b4cf" "magenta"))
   (magenta    '("#9e60b1" "#c9b4cf" "magenta"))

   ;; (violet     '("#8959a8" "#996699" "brightmagenta"))
   ;; (violet     '("#744B8F" "#996699" "brightmagenta"))
   (violet     '("#7d519a" "#996699" "brightmagenta"))
   (cyan       '("#8abeb7" "#8abeb7" "cyan"))
   (dark-cyan  (doom-lighten cyan 0.4))

   ;; face categories
   (highlight      blue)
   (vertical-bar   base3)
   (selection      base1)
   (builtin        blue)
   (comments       grey)
   (doc-comments   grey)
   (constants      orange)
   (functions      blue)
   (keywords       violet)
   (methods        blue)
   (operators      fg)
   (type           dark-yellow);;(doom-darken yellow 0.5))
   (strings        green)
   (variables      red)
   (numbers        orange)
   (region         selection)
   (error          red)
   (warning        yellow)
   (success        green)
   (vc-modified    (doom-lighten yellow 0.4))
   (vc-added       (doom-lighten green 0.4))
   (vc-deleted     red)

   ;; custom categories
   (org-block-bg             (doom-lighten bg-alt 0.3))
   (modeline-bg              `(,(doom-lighten (car bg-alt) 0.4) ,@(cdr base3)))
   (modeline-bg-alt          bg)
   (modeline-bg-inactive     `(,(doom-darken (car bg) 0.04) ,@(cdr base1)))
   (modeline-bg-alt-inactive bg)
   (modeline-fg              fg)
   (modeline-fg-inactive     comments)
   (modeline-fg-alt-inactive comments)
   (-modeline-pad            nil))

  ;;;; Base theme face overrides
  (;;((font-lock-doc-face &override) :slant 'italic)
   ((line-number &override) :foreground base4 :italic nil)
   ((line-number-current-line &override) :foreground base8 :italic nil)
   (mode-line
    :background modeline-bg :foreground modeline-fg
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg)))
   (mode-line-inactive
    :background modeline-bg-inactive :foreground modeline-fg-inactive
    :box (if -modeline-pad `(:line-width ,-modeline-pad :color ,modeline-bg-inactive)))
   (mode-line-highlight :inherit 'bold :background highlight :foreground base0)

   ;;;; magit
   ((magit-diff-context &override) :background "#f6f6f6")
   ((magit-diff-context-highlight &override) :background "#ffffff")
   ;; ((magit-diff-added &override) :foreground "#6b8501" :background "#edf0e0")
   ;; ((magit-diff-removed &override) :background "#f2e5e4")
   ((magit-diff-added &override) :foreground "#6b8501" :background "#f6f7ef")
   ((magit-diff-removed &override) :foreground "#a44f56" :background "#fbf3f3")
   ((magit-diff-added-highlight &override) :bold nil :foreground "#6b8501" :background "#f6f7ef")
   ((magit-diff-removed-highlight &override) :bold nil :foreground "#a44f56" :background "#fbf3f3")
   (diff-refine-added :inverse-video nil :bold t :foreground "#6b8501" :background "#f6f7ef")
   (diff-refine-removed :inverse-video nil :bold t :foreground "#a44f56" :background "#fbf3f3")

   ;;;; doom-modeline
   (doom-modeline-bar :background highlight)
   (doom-modeline-buffer-path       :foreground violet :weight 'bold)
   (doom-modeline-buffer-major-mode :inherit 'doom-modeline-buffer-path)
   ;;;; ivy
   (ivy-current-match :background region :distant-foreground grey :weight 'ultra-bold)
   (ivy-minibuffer-match-face-1 :foreground base5 :weight 'light)
   (ivy-minibuffer-match-face-2 :inherit 'ivy-minibuffer-match-face-1 :foreground violet :weight 'ultra-bold)
   (ivy-minibuffer-match-face-3 :inherit 'ivy-minibuffer-match-face-2 :foreground blue)
   (ivy-minibuffer-match-face-4 :inherit 'ivy-minibuffer-match-face-2 :foreground red)
   ;;;; org <built-in>
   ((org-block &override)            :background org-block-bg)
   ((org-block-background &override) :background org-block-bg)
   ((org-block-begin-line &override) :background org-block-bg)
   ((org-quote &override)            :background org-block-bg)
   ;;;; outline <built-in>
   ((outline-1 &override) :foreground teal)
   ((outline-2 &override) :foreground blue)
   ((outline-3 &override) :foreground violet)
   ((outline-4 &override) :foreground blue)
   ((outline-5 &override) :foreground violet)
   ((outline-6 &override) :foreground blue)
   ((outline-7 &override) :foreground violet)
   ((outline-8 &override) :foreground blue)
   ;;;; rainbow-delimiters
   (rainbow-delimiters-depth-1-face :foreground violet)
   (rainbow-delimiters-depth-2-face :foreground blue)
   (rainbow-delimiters-depth-3-face :foreground green)
   (rainbow-delimiters-depth-4-face :foreground magenta)
   (rainbow-delimiters-depth-5-face :foreground orange)
   (rainbow-delimiters-depth-6-face :foreground yellow)
   (rainbow-delimiters-depth-7-face :foreground teal)
   ;;;; solaire-mode
   (solaire-mode-line-face :inherit 'mode-line :background modeline-bg-alt)
   (solaire-mode-line-inactive-face
    :inherit 'mode-line-inactive
    :background modeline-bg-alt-inactive
    :foreground modeline-fg-alt-inactive)
   ;;;; treemacs
   (treemacs-git-untracked-face :foreground yellow)
   ;;;; whitespace <built-in>
   (whitespace-tab :background (doom-lighten base0 0.6)
                   :foreground comments))

  ;; --- variables --------------------------
  ;; ()
  )
#+end_src

** stuff
#+begin_src emacs-lisp :tangle no
;; (advice-add 'name-of-func-to-override :override
;;             (lambda () (message "does this instead now")))
;;
;; (defface variable-pitch
;;   '((((type w32))
;;      ;; This is a workaround for an issue discussed in
;;      ;; https://lists.gnu.org/r/emacs-devel/2016-04/msg00746.html.
;;      ;; We need (a) the splash screen not to pick up bold-italics variant of
;;      ;; the font, and (b) still be able to request bold/italic/larger size
;;      ;; variants in the likes of EWW.
;;      :family "Arial" :foundry "outline")
;;   (t :family "Sans Serif"))
;;   "The basic variable-pitch face."
;;   :group 'basic-faces)
#+end_src

#+begin_src emacs-lisp :tangle no
;; (global-auto-revert-mode 1)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
* Orderless
#+begin_src emacs-lisp
(defun ar/orderless-dispatch (pattern _index _total)
  (cond
   ;; Ensure $ works with Consult commands, which add disambiguation suffixes
   ((string-suffix-p "$" pattern)
    `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
   ;; Ignore single !
   ((string= "!" pattern) `(orderless-literal . ""))
   ;; Without literal
   ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
   ;; Character folding
   ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
   ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
   ;; Initialism matching
   ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
   ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
   ;; Literal matching
   ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
   ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
   ;; Flex matching
   ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
   ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))
   (t `(orderless-flex . pattern))
   ))

(after! orderless
;;   (advice-remove #'company-capf--candidates #'+vertico--company-capf--candidates-a)
;;   (advice-remove #'company-capf--candidates #'ar/company-capf--candidates-a)
;;   (defadvice! ar/company-capf--candidates (fn &rest args)
;;     "Highlight company matches correctly, and try default completion styles before
;; orderless."
;;     :around #'company-capf--candidates
;;     (let ((completion-styles '(emacs22)))
;;       (apply fn args)))

  (setq orderless-style-dispatchers '(ar/orderless-dispatch)))
#+end_src

* Projectile
#+begin_src emacs-lisp
(setq projectile-globally-ignored-directories '(".idea"
                                                ".vscode"
                                                ".ensime_cache"
                                                ".eunit"
                                                "*.git"
                                                ".hg"
                                                ".fslckout"
                                                "_FOSSIL_"
                                                ".bzr"
                                                "_darcs"
                                                ".tox"
                                                ".svn"
                                                ".stack-work"
                                                ".ccls-cache"
                                                ".cache"
                                                ".clangd"
                                                "*.gem"
                                                "*tmp"
                                                "*node_modules")
      projectile-indexing-method 'alien)
#+end_src

* FZF (disabled)
#+begin_src emacs-lisp :tangle no
(require 'fzf)

(defun ar-fzf/action-find-file (target)
  (when (file-exists-p target)
    (find-file target)))

(defun ar-fzf/start (cmd directory action)
  (require 'term)

  ; Clean up existing fzf
  (fzf-close)

  (window-configuration-to-register fzf/window-register)
  (advice-add 'term-handle-exit :after (fzf/after-term-handle-exit directory action))
  (let* ((term-exec-hook nil)
         (buf (get-buffer-create fzf/buffer-name)))
    (with-current-buffer buf
      (setq default-directory (if directory directory "")))
    (make-term fzf/executable "zsh" nil "-c" cmd)
    (pop-to-buffer buf)
    (and (fboundp #'turn-off-evil-mode) (turn-off-evil-mode))
    (visual-line-mode 0)


    (setq fzf-hook (fzf/after-term-handle-exit directory action))

    ;; disable various settings known to cause artifacts, see #1 for more details
    (setq-local scroll-margin 0)
    (setq-local scroll-conservatively 0)
    (setq-local term-suppress-hard-newline t) ;for paths wider than the window
    (setq-local show-trailing-whitespace nil)
    (setq-local display-line-numbers nil)
    (setq-local truncate-lines t)
    (face-remap-add-relative 'mode-line '(:box nil))

    (term-char-mode)
    (setq mode-line-format (format "[%s]" directory))))

(defun ar-fzf/fd ()
  (interactive)
  (ar-fzf/start
   ;; "fd -t f . | fzf -x --layout=reverse --margin=0 --no-hscroll --border=none --info=hidden | echo"
   ;; "fd -t f . | fzf -x --margin=0 --no-hscroll --border=none --info=hidden --print-query"
   "git ls-files | fzf -x --margin=0 --no-hscroll --border=none --info=hidden --print-query --marker=■"
   (fzf/resolve-directory)
   #'ar-fzf/action-find-file))

(set-popup-rule! "^\\*fzf" :size 0.15 :vslot -4 :select t :quit nil :ttl 0)

(defun ar/projectile-find-file (&optional invalidate-cache)
  (interactive "P")
  (let* ((project-root (projectile-acquire-root))
         (file (projectile-completing-read "Find file: "
                                           (projectile-project-files project-root)
                                           :initial-input "~")))
    (when file
      (find-file (expand-file-name file project-root))
      (run-hooks 'projectile-find-file-hook))))

(map! :leader
      :prefix "p"
      :desc "Find file in project" "f" #'ar-fzf/fd)
#+end_src

* Dired
#+begin_src emacs-lisp
(defun ar-dired-open-file ()
  (interactive)
  (dired-do-shell-command "open" current-prefix-arg
                          (dired-get-marked-files t current-prefix-arg)))

(defun ar-dired-copy-full-path ()
  (interactive)
  (dired-copy-filename-as-kill 0))

(defun ar-dired-unmount-device ()
  (interactive)
  (save-window-excursion
    (dired-do-shell-command "diskutil unmount" current-prefix-arg
                            (dired-get-marked-files t current-prefix-arg))))

(setq ar/dired-workspace "*dired*")

(defun ar/open-dired ()
  (interactive)
  (if (+workspace-exists-p ar/dired-workspace)
      (+workspace-switch ar/dired-workspace)
    (+workspace-switch ar/dired-workspace t)
    (dired "~")))

(defun ar/close-dired ()
  (interactive)
  (if (equal (+workspace-current-name) ar/dired-workspace)
      (+workspace/delete ar/dired-workspace)
    (kill-buffer)))

(after! dired
  (setq dired-listing-switches "-ahlo"
        dired-omit-files "\\`[.]?#"
        dired-kill-when-opening-new-dired-buffer t
        dired-no-confirm t
        dired-deletion-confirmer (lambda (x) t))

  (map! :map dired-mode-map
        :ng "q" #'ar/close-dired)

  (set-popup-rule! "^\\*image-dired\\*"
    :slot 20 :side 'bottom :size 0.3 :select t :quit nil :ttl 0)
  (set-popup-rule! "^\\*image-dired-display-image\\*"
    :slot 21 :side 'right :size 0.5 :select t :quit nil :ttl 0)
  (evil-collection-define-key 'normal 'dired-mode-map
    ;;    "h" 'dired-up-directory
    ;;    "l" 'dired-find-alternate-file))
    (kbd "C-o") 'ar-dired-open-file
    "Y" 'ar-dired-copy-full-path
    (kbd "s-u") 'ar-dired-unmount-device
    (kbd "RET") 'dired-find-file
    [return] 'dired-find-file
    ;; (kbd "RET") 'dired-find-alternate-file
    ;; [return] 'dired-find-alternate-file
    [C-return] 'dired-find-file))

(use-package! dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode)
  (map! :map dired-mode-map
        :localleader
        :desc "Open image-dired" "i" (lambda ()
                                       (interactive)
                                       (image-dired (buffer-file-name)))))
#+end_src

Remove VCS diff highlighting to speed up dired.
#+begin_src emacs-lisp
(after! (dired diff-hl)
  (remove-hook 'dired-mode-hook #'diff-hl-dired-mode-unless-remote))
#+end_src

** old omit file list
#+begin_src emacs-lisp :tangle no
;;(regexp-opt '(".DS_Store" ".project" ".projectile" ".svn" ".git" ".ccls-cache") t)
'(dired-omit-files "^.DS_Store\\'\\|^.project\\(?:ile\\)?\\'\\|^.\\(svn\\|git\\)\\'\\|^.ccls-cache\\'\\|\\(?:\\.js\\)?\\.meta\\'\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")
#+end_src
* Org
** General
#+begin_src emacs-lisp
(setq org-directory "~/org/"
      org-modules '(org-habit)
      org-attach-auto-tag "attach"
      org-attach-id-dir "~/org/files")

(use-package! org-contacts
  :commands org-contacts-anniversaries
  :config
  (setq org-contacts-files '("~/org/contacts.org")
        org-contacts-birthday-format "Birthday: %h (%Y)"))

(after! org
  (setq org-ellipsis " ▼"
        org-log-into-drawer t
        org-clock-string-limit 1
        org-clock-display-default-range 'thismonth
        org-file-apps '((auto-mode . emacs) (directory . emacs)
                        (remote . emacs)
                        (system . "open %s")
                        ("pdf" . emacs)
                        ("ps.gz" . "gv %s")
                        ("eps.gz" . "gv %s")
                        ("dvi" . "xdvi %s")
                        ("fig" . "xfig %s")
                        (t . "open %s"))
        org-todo-keywords '((sequence "TODO(t!)" "WIP(s!)" "|" "DONE(d!)")
                            (sequence "PROJ(p!)" "PWIP(s!)" "|" "DONE(d!)")
                            (type "LOOP(r!)"
                                  "NEW(N!)"
                                  "WAIT(w!)"
                                  "HOLD(h!)"
                                  "IDEA(i!)"
                                  "READ(e)"
                                  "|"
                                  "KILL(k@)")
                            (sequence "[ ](T)" "|" "[X](D)")
                            (sequence "[-](S)" "[?](W)" "|")
                            (sequence "|" "OKAY(o)" "YES(y)" "NO(n)"))
        org-todo-keyword-faces '(("TODO" . (:inherit warning))
                                 ("PROJ" . (:inherit warning))
                                 ("WAIT" . (:inherit font-lock-variable-name-face))
                                 ("HOLD" . (:inherit font-lock-variable-name-face))
                                 ("IDEA" . (:inherit success))
                                 ("WIP"  . +org-todo-active)
                                 ("PWIP" . +org-todo-active)
                                 ("NO"   . +org-todo-cancel)
                                 ("KILL" . +org-todo-cancel))
        ;; org-todo-keyword-faces '(("[-]"  . +org-todo-active)
        ;;                          ("STRT" . +org-todo-active)
        ;;                          ("WIP"  . +org-todo-active)
        ;;                          ("[?]"  . +org-todo-onhold)
        ;;                          ("WAIT" . +org-todo-onhold)
        ;;                          ("HOLD" . +org-todo-onhold)
        ;;                          ("PROJ" . +org-todo-project)
        ;;                          ("PWIP" . +org-todo-active)
        ;;                          ("NO"   . +org-todo-cancel)
        ;;                          ("KILL" . +org-todo-cancel))
        org-capture-templates '(("i" "Inbox" entry
                                 (file "inbox.org")
                                 "* NEW %i%a%?
:LOGBOOK:
- State \"NEW\"        from              %U
:END:")
                                ("c" "Clip" entry
                                 (file "inbox.org")
                                 "* %(org-cliplink-capture)%?\n%U\n")))

  ;; (custom-set-faces!
  ;;   '(+org-todo-project :inherit (bold font-lock-variable-name-face org-todo)))
  (custom-set-faces
   '(+org-todo-project ((t (:inherit (bold font-lock-variable-name-face org-todo))))))

  ;; (setq org-mode-line-string "")
  (defun org-clock-update-mode-line () nil)

  (defadvice! ar/org-attach-tag (fn &rest args)
    :around #'org-attach-tag
    (ignore-errors (apply fn args)))
  (org-link-set-parameters "logic" :follow
                           (lambda (url)
                             (shell-command (format "open \"%s\"" url))))
  (org-link-set-parameters "addressbook" :follow
                           (lambda (url)
                             (shell-command (format "open \"addressbook:%s\"" url)))))

(defun ar/capture-note (content)
  (with-current-buffer (find-file-noselect
                        (expand-file-name "inbox.org" org-directory))
    (save-excursion
      (goto-char (point-max))
      ;; (org-insert-todo-heading 1)
      (org-insert-heading)
      (insert (concat content "\n"))
      (org-insert-time-stamp nil t t))))

(defun ar/capture-url (url)
  (org-cliplink-retrieve-title
   url
   (lambda (url title)
     (ar/capture-note
      (org-cliplink-org-mode-link-transformer url title))
     (start-process-shell-command
      "ar/capture-url" nil
      "afplay -v 0.25 /System/Library/Sounds/Funk.aiff"))))

(defun ar/capture-message (msg)
  (let ((from (plist-get msg :from)))
    (when (consp (car from)) ; Occurs when using mu4e 1.8+.
      (setq from (car from)))
    (ar/capture-note
     (concat "Email "
             "[[mu4e:msgid:"
             (plist-get msg :message-id) "]["
             (truncate-string-to-width
              (plist-get from :name) 25 nil nil t)
             " - "
             (truncate-string-to-width
              (plist-get msg :subject) 40 nil nil t)
             "]] "))))

(defun ar/capture-message-at-point ()
  (interactive)
  (let ((msg (mu4e-message-at-point)))
    (when msg (ar/capture-message msg))))
#+end_src

** Agenda
#+begin_src emacs-lisp
(defun ar/org-remove-file-for-current-session (file)
  (let* ((org-agenda-skip-unavailable-files nil)
         (file (or file buffer-file-name
                   (user-error "Current buffer does not visit a file")))
         (true-file (file-truename file))
         (afile (abbreviate-file-name file))
         (files (delq nil (mapcar
                           (lambda (x)
                             (unless (equal true-file
                                            (file-truename x))
                               x))
                           (org-agenda-files t)))))
    (if (not (= (length files) (length (org-agenda-files t))))
        (progn
          (setq org-agenda-files files)
          ;; (org-install-agenda-files-menu)
          (message "Removed from Org Agenda list: %s" afile))
      (message "File was not in list: %s (not removed)" afile))))

(defun ar/org-agenda-closed-state-clocked-prefix (closedp statep state clocked)
  (cond
   (closedp "")
   (statep "")
   (t "🍅")))

(defun ar/org-agenda-get-progress ()
  "Return the logged TODO entries for agenda display."
  (with-no-warnings (defvar date))
  (let* ((props (list 'mouse-face 'highlight
                      'org-not-done-regexp org-not-done-regexp
                      'org-todo-regexp org-todo-regexp
                      'org-complex-heading-regexp org-complex-heading-regexp
                      'help-echo
                      (format "mouse-2 or RET jump to org file %s"
                              (abbreviate-file-name buffer-file-name))))
         (items (if (consp org-agenda-show-log-scoped)
                    org-agenda-show-log-scoped
                  (if (eq org-agenda-show-log-scoped 'clockcheck)
                      '(clock)
                    org-agenda-log-mode-items)))
         (parts
          (delq nil
                (list
                 (when (memq 'closed items) (concat "\\<" org-closed-string))
                 (when (memq 'clock items) (concat "\\<" org-clock-string))
                 (when (memq 'state items)
                   (format "- +State \"%s\".*?" org-todo-regexp)))))
         (parts-re (if parts (mapconcat #'identity parts "\\|")
                     (error "`org-agenda-log-mode-items' is empty")))
         (regexp (concat
                  "\\(" parts-re "\\)"
                  " *\\["
                  (regexp-quote
                   (substring
                    (format-time-string
                     (car org-time-stamp-formats)
                     (encode-time  ; DATE bound by calendar
                      0 0 0 (nth 1 date) (car date) (nth 2 date)))
                    1 11))))
         (org-agenda-search-headline-for-time nil)
         marker hdmarker priority category level tags closedp type
         statep clockp state ee txt extra timestr rest clocked inherited-tags
         effort effort-minutes)
    (goto-char (point-min))
    (while (re-search-forward regexp nil t)
      (catch :skip
        (org-agenda-skip)
        (setq marker (org-agenda-new-marker (match-beginning 0))
              closedp (equal (match-string 1) org-closed-string)
              statep (equal (string-to-char (match-string 1)) ?-)
              clockp (not (or closedp statep))
              state (and statep (match-string 2))
              category (org-get-category (match-beginning 0))
              timestr (buffer-substring (match-beginning 0) (point-at-eol))
              effort (save-match-data (or (get-text-property (point) 'effort)
                                          (org-entry-get (point) org-effort-property))))
        (setq effort-minutes (when effort (save-match-data (org-duration-to-minutes effort))))
        (when (string-match "\\]" timestr)
          ;; substring should only run to end of time stamp
          (setq rest (substring timestr (match-end 0))
                timestr (substring timestr 0 (match-end 0)))
          (if (and (not closedp) (not statep)
                   (string-match "\\([0-9]\\{1,2\\}:[0-9]\\{2\\}\\)\\].*?\\([0-9]\\{1,2\\}:[0-9]\\{2\\}\\)"
                                 rest))
              (progn (setq timestr (concat (substring timestr 0 -1)
                                           "-" (match-string 1 rest) "]"))
                     (setq clocked (match-string 2 rest)))
            (setq clocked "-")))
        (save-excursion
          (setq extra
                (cond
                 ((not org-agenda-log-mode-add-notes) nil)
                 (statep
                  (and (looking-at ".*\\\\\n[ \t]*\\([^-\n \t].*?\\)[ \t]*$")
                       (match-string 1)))
                 (clockp
                  (and (looking-at ".*\n[ \t]*-[ \t]+\\([^-\n \t].*?\\)[ \t]*$")
                       (match-string 1)))))
          (if (not (re-search-backward org-outline-regexp-bol nil t))
              (throw :skip nil)
            (goto-char (match-beginning 0))
            (setq hdmarker (org-agenda-new-marker)
                  inherited-tags
                  (or (eq org-agenda-show-inherited-tags 'always)
                      (and (listp org-agenda-show-inherited-tags)
                           (memq 'todo org-agenda-show-inherited-tags))
                      (and (eq org-agenda-show-inherited-tags t)
                           (or (eq org-agenda-use-tag-inheritance t)
                               (memq 'todo org-agenda-use-tag-inheritance))))
                  tags (org-get-tags nil (not inherited-tags))
                  level (make-string (org-reduced-level (org-outline-level)) ? ))
            (looking-at "\\*+[ \t]+\\([^\r\n]+\\)")
            (setq txt (match-string 1))
            (when (and statep (string-equal state "DONE"))
              (setq txt (s-replace "TODO " "DONE " txt)))
            (when extra
              (if (string-match "\\([ \t]+\\)\\(:[^ \n\t]*?:\\)[ \t]*$" txt)
                  (setq txt (concat (substring txt 0 (match-beginning 1))
                                    " - " extra " " (match-string 2 txt)))
                (setq txt (concat txt " - " extra))))
            (setq txt (org-agenda-format-item
                       (ar/org-agenda-closed-state-clocked-prefix closedp statep state clocked)
                       (org-add-props txt nil
                         'effort effort
                         'effort-minutes effort-minutes)
                       level category tags timestr)))
          (setq type (cond (closedp "closed")
                           (statep "state")
                           (t "clock")))
          (setq priority 100000)
          (org-add-props txt props
            'org-marker marker 'org-hd-marker hdmarker 'face 'org-agenda-done
            'priority priority 'level level
            'effort effort 'effort-minutes effort-minutes
            'type type 'date date
            'undone-face 'org-warning 'done-face 'org-agenda-done)
          (push txt ee))
        (goto-char (point-at-eol))))
    (nreverse ee)))

(setq org-agenda-files '("~/org/habits.org"
                         "~/org/forecast.org"
                         "~/org/personal.org"
                         "~/org/home.org"
                         "~/org/pomodoro-bits.org"
                         "~/org/emacs.org"
                         "~/.emacs.d/.local/ical/"))

(after! org
  ;; (ar/org-remove-file-for-current-session "~/org/archive.org")
  (setq org-agenda-search-view-max-outline-level 2
        org-agenda-block-separator ?―
        org-habit-completed-glyph ?╳
        org-habit-show-done-always-green t
        org-agenda-custom-commands
        (quote
         (("z" "Schedule"
           ((agenda "" ((org-agenda-overriding-header "The Schedule:")
                        (org-agenda-span 'day)
                        (org-agenda-ndays 1)
                        (org-agenda-prefix-format " %?-12t% s")
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+0d"))))
           ((org-agenda-files (list ".schedule.org"))))
          ("w" "This week"
           ((agenda "" ((org-agenda-overriding-header "This week:")
                        (org-agenda-span 'week)
                        (org-agenda-start-on-weekday 1)
                        (org-agenda-start-day "+0d")
                        (org-agenda-prefer-last-repeat t)
                        (org-agenda-prefix-format " %i %?-12t% s")
                        (org-agenda-sorting-strategy '(time-up priority-down category-keep))))))
          ("n" "Today's Schedule and next TODOs"
           ((agenda "" ((org-agenda-overriding-header " ")
                        (org-agenda-span 'day)
                        (org-agenda-ndays 1)
                        (org-agenda-show-log t)
                        (org-agenda-include-diary t)
                        (org-agenda-log-mode-items '(state clock))
                        (org-agenda-scheduled-leaders '("" "%2dd overdue: "))
                        ;; (org-agenda-todo-keyword-format "[ ]")
                        (org-agenda-prefer-last-repeat t)
                        (org-agenda-prefix-format " %i %?-12t% s")
                        (org-agenda-sorting-strategy '(time-up priority-down category-keep))
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "+0d")))
            ;; (ar/org-agenda-pomodoro-graph
            ;;  "" ((org-agenda-overriding-header "Pomodoro Graph:")))
            (tags "-habit/WIP"
                  ((org-agenda-overriding-header " ")))
            (tags "-habit/WAIT"
                  ((org-agenda-overriding-header " ")))
            (tags-todo "-habit/!TODO"
                       ((org-agenda-overriding-header " ")))
            (tags "-hack" ((org-agenda-overriding-header " ")
                           (org-tags-match-list-sublevels nil)
                           (org-agenda-prefix-format "  * %?-12t% s")
                           (org-agenda-files (list "~/org/inbox.org")))))))))
  (advice-add #'org-agenda-get-progress :override #'ar/org-agenda-get-progress)

  ;; (custom-set-faces!
  ;;   '(org-habit-ready-face :foreground "#eee" :background "#6c8e22" :weight bold)
  ;;   '(org-habit-ready-future-face :foreground "#eee" :background "DarkOliveGreen4" :weight bold))
  (custom-set-faces
   '(org-habit-ready-face ((t (:foreground "#eee" :background "#6c8e22" :weight bold))))
   '(org-habit-ready-future-face ((t (:foreground "#eee" :background "DarkOliveGreen4" :weight bold)))))
  )
;; (add-workspace-switches-to-mode-map evil-org-agenda-mode-map))
#+end_src

** Download
#+begin_src emacs-lisp
(after! org-download
  (setq-default org-download-image-dir "~/org/files"
                org-download-heading-lvl nil
                org-download-image-org-width 300
                org-download-timestamp "%Y%m%d-"))
#+end_src

** Pomodoro
#+begin_src emacs-lisp
(defun org-pomodoro-columns ()
  (interactive)
  (require 'org-duration)
  (let ((org-duration-format '(("P" . t))))
    (org-columns nil "%60ITEM(Title) %10CLOCKSUM(Pomodoros)")))

(defun org-pomodoro-display (&optional arg)
  (interactive)
  (require 'org-duration)
  (let ((org-duration-format '(("P" . t))))
    (org-clock-display arg)))

;; (defun org-clock-mark-default-task ()
;;   "Mark current task as default task."
;;   (save-excursion
;;     (org-back-to-heading t)
;;     (move-marker org-clock-default-task (point))))

(defun ar/pomodoro-go ()
  (interactive)
  (if (org-pomodoro-active-p)
      (message "There is already a running pomodoro.")
    (save-excursion
      (with-current-buffer (find-file-noselect
                            (expand-file-name "inbox.org" org-directory))
        (goto-char (point-min))
        (org-next-visible-heading 1)
        (let ((org-pomodoro-expiry-time nil))
          (org-pomodoro))
        ))))

;; copying from org-habit-build-graph for now
(defun ar/org-agenda-pomodoro-graph (&optional arg)
  (interactive "P")
  (catch 'exit
    (org-agenda-prepare "PomodoroGraph")
    (org-agenda--insert-overriding-header "Pomodoro Graph:\n")
    (org-agenda-mark-header-line (point-min))
    (insert "  "
            (let* ((i 0)
                   (len 21)
                   (graph (make-string len ?6)));\s)))
              (while (< i len)
                (let ((face (cond ((< i 3) 'org-habit-clear-face)
                                  ((< i 6) 'org-habit-overdue-face)
                                  ((< i 9) 'org-habit-alert-face)
                                  (t 'org-habit-ready-face))))

                  (put-text-property i (1+ i) 'face face graph))
                (setq i (1+ i)))
              graph)
            "\n")
    (org-agenda-finalize)
    (setq buffer-read-only t)))

(setq org-pomodoro-auth-token
      (substring
       (shell-command-to-string "security find-generic-password -s pomodoro-token -w")
       0 -1))

(defun ar/org-pomodoro-project-id ()
  (let ((file (buffer-file-name (org-clocking-buffer))))
    (message "%s" file)
    (cond ((string-match "forecast.org" file) 38)
          ((string-match "emacs.org" file) 44))))

(use-package! org-pomodoro
  :commands (org-pomdoro
             org-pomodoro-columns
             org-pomodoro-display
             org-pomodoro-dblock-update
             ar/add-pomodoro)
  :config
  (setq org-pomodoro-length 25
        org-pomodoro-short-break-length 5
        org-pomodoro-long-break-length 20
        org-duration-units `(("min" . 1)
                             ("h" . 60)
                             ("d" . ,(* 60 24))
                             ("w" . ,(* 60 24 7))
                             ("m" . ,(* 60 24 30))
                             ("y" . ,(* 60 24 365.25))
                             ("P" . ,org-pomodoro-length))
        org-pomodoro-audio-player "afplay -v 0.75"
        org-pomodoro-keep-killed-pomodoro-time t
        org-pomodoro-format "%s"
        org-pomodoro-long-break-format "%s"
        org-pomodoro-short-break-format "%s"
        org-pomodoro-finished-sound "~/iCloud/Config/break1.wav"
        org-pomodoro-short-break-sound "~/iCloud/Config/pomodoro2.mp3"
        org-pomodoro-long-break-sound "~/iCloud/Config/break2.mp3") ;; (add-to-list 'org-duration-units (cons "P" org-pomodoro-length))
  (add-to-list 'org-effort-durations (cons "P" org-pomodoro-length))
  (add-to-list 'org-global-properties '("Effort_ALL" . "1P 2P 3P 4P 5P 6P 7P 8P"))

  (alert-add-rule :category "org-pomodoro" :style 'ar-notifier)

  (add-hook! org-pomodoro-short-break-finished-hook
    (lambda ()
      (when (y-or-n-p "Start another pomodoro?")
        (let ((current-prefix-arg '(16)))
          (call-interactively 'org-pomodoro)))))

  (defun org-pomodoro-dblock-update (&optional arg)
    (interactive)
    (require 'org-duration)
    (let ((org-duration-format '(("P". t))))
      (org-dblock-update)))

  (defun ar/record-pomodoro (project-id summary time)
    (let ((url-request-method "POST")
          (url-request-extra-headers
           `(("Content-Type" . "application/json")
             ("Accept" . "*/*")
             ("Authorization" . ,(concat "Token " org-pomodoro-auth-token))))
          (url-request-data
           (json-encode `(("projectId" . ,project-id)
                          ("summary" . ,summary)
                          ("completedAt" . ,(format-time-string "%FT%T%z" time))))))
      (message "%s" url-request-data)
      (url-retrieve "https://pomodoro.blackbits.pro/api/pomodoros"
                    (lambda (status) (message "Pomodoro recorded.")))))

  (defun beginning-of-day (time)
    (let* ((dt (decode-time time))
           (h (decoded-time-hour dt))
           (m (decoded-time-minute dt))
           (s (decoded-time-second dt))
           (diff (+ (* h 3600) (* m 60) s)))
      (time-subtract time (seconds-to-time diff))))

  (defun ar/add-pomodoro ()
    (interactive)
    (let* ((title (nth 4 (org-heading-components)))
           (last-time (org-clock-get-last-clock-out-time))
           (start-time (if last-time (time-add last-time (* 5 60))
                         (beginning-of-day nil)))
           (stop-time (time-add start-time (* 25 60))))
      (org-clock-in nil start-time)
      (org-clock-out nil t stop-time)
      (when-let ((project-id (ar/org-pomodoro-project-id)))
        (ar/record-pomodoro project-id title stop-time))))

  (defun ar/org-pomodoro-finished ()
    (when-let ((project-id (ar/org-pomodoro-project-id)))
      (ar/record-pomodoro project-id org-clock-heading nil))
    (unless org-pomodoro-clock-break
      (org-clock-out nil t))
    (setq org-pomodoro-count (+ org-pomodoro-count 1))
    (if (zerop (mod org-pomodoro-count org-pomodoro-long-break-frequency))
        (progn
          (org-pomodoro-reset)
          (org-pomodoro-maybe-play-sound :long-break)
          (alert "Time for a long break." :title "Pomodoro set completed!"))
      (progn
        (org-pomodoro-maybe-play-sound :pomodoro)
        (alert "Time for a break." :title "Pomodoro completed!")
        (org-pomodoro-start :short-break)))
    (org-pomodoro-update-mode-line)
    (org-agenda-maybe-redo)
    (run-hooks 'org-pomodoro-finished-hook))
  (advice-add #'org-pomodoro-finished :override #'ar/org-pomodoro-finished))

(defun org-dblock-write:weekly (params)
  (cl-flet ((fmttm (tm) (format-time-string (org-time-stamp-format t t) tm)))
    (let ((file (or (plist-get params :file) (buffer-file-name)))
          (start (seconds-to-time
                  (org-matcher-time (plist-get params :tstart))))
          (end (seconds-to-time (org-matcher-time (plist-get params :tend)))))
      (while (time-less-p start end)
        (let ((next-week (time-add start
                                   (date-to-time "1970-01-08T00:00Z")))
              (week-begin (line-beginning-position))
              (week-minutes 0))
          (insert "\nWeekly Table from " (fmttm start) "\n")
          (insert "| Day of Week | Time |\n|-\n")
          (while (time-less-p start next-week)
            (let* ((next-day (time-add start (date-to-time "1970-01-02T00:00Z")))
                   (minutes
                    (with-current-buffer (find-file-noselect file)
                      (cadr (org-clock-get-table-data
                             file
                             (list :maxlevel 0
                                   :tstart (fmttm start)
                                   :tend (fmttm next-day)))))))
              (insert "|" (format-time-string "%a, %b %d" start)
                      "|" (format "%d" (round minutes 25))
                      "|\n")
              (org-table-align)
              (cl-incf week-minutes minutes)
              (setq start next-day)))
          (when (equal week-minutes 0)
            (delete-region week-begin (line-beginning-position))))))))

;; (after! org-pomodoro
;;   (alert-add-rule :category "org-pomodoro" :style 'ar-alert))

;; (defun ar/current-file-pomodoros ()
;;   (interactive)
;;   (round (cadr
;;           (org-clock-get-table-data nil (list :block 'thismonth

;;                                               org-pomodoro-length))
#+end_src

** Alert
#+begin_src emacs-lisp
(defvar ar/org-alert-current-check nil)

(defun ar/org-alert-check ()
  "Check for active, due deadlines and initiate notifications."
  (interactive)
  (when (or (not ar/org-alert-current-check)
            (async-ready ar/org-alert-current-check))
    (setq ar/org-alert-current-check
          (async-start
           `(lambda ()
              ,(async-inject-variables "\\`load-path\\'")
              (require 'alert)
              (require 'org-alert)
              (setq org-agenda-files '("~/org/")
                    org-alert-notification-title "Agenda"
                    org-alert-match-string "SCHEDULED>=\"<today>\"+SCHEDULED<\"<tomorrow>\"|DEADLINE>=\"<today>\"+DEADLINE<\"<tomorrow>\"|STYLE=\"habit\"")
              (defun ar/alert (title message)
                (let ((args
                       (list "-title"   (alert-encode-string title)
                             "-sender"  "org.gnu.Emacs"
                             "-message" (alert-encode-string message))))
                  (apply #'call-process "terminal-notifier" nil nil nil args)))
              (defun ar/org-alert--check-time (time &optional now)
                (let* ((time (mapcar #'string-to-number (split-string time ":")))
                       (now (or now (decode-time (current-time))))
                       (now (org-alert--to-minute (decoded-time-hour now)
                                                  (decoded-time-minute now)))
                       (then (org-alert--to-minute (car time) (cadr time))))
                  (= (- then now) org-alert-notify-cutoff)))
              (defun ar/org-alert--dispatch ()
                (let* ((entry (org-alert--parse-entry))
                       (head (replace-regexp-in-string
                              "\\[\\[[^]]+\\]\\[\\([^]]+\\)\\]\\]" "\\1" (car entry)))
                       (time (or (cadr entry) "09:00")))
                  (when (ar/org-alert--check-time time)
                    (ar/alert org-alert-notification-title (concat time ": " head)))))
              (org-map-entries 'ar/org-alert--dispatch org-alert-match-string 'agenda
                               '(org-agenda-skip-entry-if 'todo
                                                          org-done-keywords-for-agenda)))
           'ignore))))

(use-package org-alert
  :config
  (setq org-alert-interval 60)
  (advice-add #'org-alert-check :override #'ar/org-alert-check)
  (org-alert-enable))
#+end_src

** ROAM
#+begin_src emacs-lisp
(setq org-roam-directory "~/org/"
      org-roam-node-display-template "${title}"
      org-roam-graph-link-hidden-types '("file"
                                         "http"
                                         "https"
                                         "mu4e"
                                         "attachment"
                                         "mailto"
                                         "fuzzy"
                                         "addressbook"
                                         "logic")
      org-roam-graph-extra-config '(("layout" . "neato")
                                    ("overlap" . "false")
                                    ("center" . "1"))
      org-roam-graph-node-extra-config '(("id" . (("shape"      . "rect")
                                                  ("style"      . "bold,rounded,filled")
                                                  ("fillcolor"  . "#EEEEEE")
                                                  ("color"      . "#C9C9C9")
                                                  ("fontcolor"  . "#111111")))
                                         ("http" . (("style"      . "rounded,filled")
                                                    ("fillcolor"  . "#EEEEEE")
                                                    ("color"      . "#C9C9C9")
                                                    ("fontcolor"  . "#0A97A6")))
                                         ("https" . (("style"      . "rounded,filled")
                                                     ("fillcolor"  . "#EEEEEE")
                                                     ("color"      . "#C9C9C9")
                                                     ("fontcolor"  . "#0A97A6"))))
      org-roam-graph-viewer (lambda (file)
                              (message "file://%s" file)
                              (xwidget-webkit-browse-url (concat "file://" file) t))
      ;; (call-process "open" nil 0 nil "-a" "Firefox" file))
      org-roam-extract-new-file-path "${slug}.org"
      org-roam-capture-templates '(("d" "default" plain "%?"
                                    :target (file+head "${slug}.org"
                                                       "#+title: ${title}\n%U\n\n")
                                    :unnarrowed t)))
;; ("a" "daily" entry
;;  "* %H%M %?"
;;  :target (file+head "%<%Y%m%d>.org"
;;                     "#+title: %<%Y-%m-%d>\n"))))

(after! (org org-roam)
  ;; (setq display-buffer-alist (cdr display-buffer-alist))
  ;; (setq +popup--display-buffer-alist (cdr +popup--display-buffer-alist))
  (set-popup-rule! (regexp-quote org-roam-buffer)
    :slot 20 :side 'bottom :size 0.3 :select t :quit t :ttl nil)

  (defun ar/org-roam-descendant-of-p (a b)
    (let ((a (file-truename a))
          (b (file-truename b)))
      (unless (equal a b)
        (string-prefix-p (replace-regexp-in-string "^\\([A-Za-z]\\):" 'downcase b t t)
                         (replace-regexp-in-string "^\\([A-Za-z]\\):" 'downcase a t t)))))
  (advice-add #'org-roam-descendant-of-p :override #'ar/org-roam-descendant-of-p)

  (cl-defmethod org-roam-node-slug ((node org-roam-node))
    "Return the slug of NODE."
    (let ((title (org-roam-node-title node))
          (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                             768 ; U+0300 COMBINING GRAVE ACCENT
                             769 ; U+0301 COMBINING ACUTE ACCENT
                             770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                             771 ; U+0303 COMBINING TILDE
                             772 ; U+0304 COMBINING MACRON
                             774 ; U+0306 COMBINING BREVE
                             775 ; U+0307 COMBINING DOT ABOVE
                             776 ; U+0308 COMBINING DIAERESIS
                             777 ; U+0309 COMBINING HOOK ABOVE
                             778 ; U+030A COMBINING RING ABOVE
                             779 ; U+030B COMBINING DOUBLE ACUTE ACCENT
                             780 ; U+030C COMBINING CARON
                             795 ; U+031B COMBINING HORN
                             803 ; U+0323 COMBINING DOT BELOW
                             804 ; U+0324 COMBINING DIAERESIS BELOW
                             805 ; U+0325 COMBINING RING BELOW
                             807 ; U+0327 COMBINING CEDILLA
                             813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                             814 ; U+032E COMBINING BREVE BELOW
                             816 ; U+0330 COMBINING TILDE BELOW
                             817 ; U+0331 COMBINING MACRON BELOW
                             )))
      (cl-flet* ((nonspacing-mark-p (char)
                                    (memq char slug-trim-chars))
                 (strip-nonspacing-marks (s)
                                         (string-glyph-compose
                                          (apply #'string (seq-remove #'nonspacing-mark-p
                                                                      (string-glyph-decompose s)))))
                 (cl-replace (title pair)
                             (replace-regexp-in-string (car pair) (cdr pair) title)))
        (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-") ;; convert anything not alphanumeric
                        ("[_-][_-]*" . "-")                   ;; remove sequential underscores
                        ("^[_-]" . "")                     ;; remove starting underscore
                        ("[_-]$" . "")))                   ;; remove ending underscore
               (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
          (downcase slug))))))

;; org roam support for org-capture doom script

(setq ar/org-roam-capture-frame-parameters
      '((name . "doom-roam-capture")
        (width . 100)
        (height . 30)
        (transient . t)
        (menu-bar-lines . 1)))

(defun ar/org-roam-is-capture-frame (&rest _)
  (and (equal (alist-get 'name ar/org-roam-capture-frame-parameters)
              (frame-parameter nil 'name))
       (frame-parameter nil 'transient)))

(defun ar/org-roam-capture-cleanup-frame ()
  "Closes the org-capture frame once done adding an entry."
  (when (and (ar/org-roam-is-capture-frame)
             (not org-capture-is-refiling))
    (delete-frame nil t)))

(add-hook 'org-capture-after-finalize-hook #'ar/org-roam-capture-cleanup-frame)

(defun ar/org-roam-capture-open-frame (&optional initial-input key)
  "Opens the org-capture window in a floating frame that cleans itself up once
you're done. This can be called from an external shell script."
  (interactive)
  (when (and initial-input (string-empty-p initial-input))
    (setq initial-input nil))
  (when (and key (string-empty-p key))
    (setq key nil))
  (let* ((frame-title-format "")
         (frame (if (ar/org-roam-is-capture-frame)
                    (selected-frame)
                  (make-frame ar/org-roam-capture-frame-parameters))))
    (select-frame-set-input-focus frame)  ; fix MacOS not focusing new frames
    (with-selected-frame frame
      ;; (require 'org-capture)
      (condition-case ex
          (letf! ((#'pop-to-buffer #'switch-to-buffer))
            (switch-to-buffer (doom-fallback-buffer))
            (let ((node (org-roam-node-create :title initial-input)))
              (org-roam-capture- :node node
                                 :props '(:immediate-finish nil))))
        ;; (org-roam-capture))
        ;; (let ((org-capture-initial initial-input)
        ;;       org-capture-entry)
        ;;   (when (and key (not (string-empty-p key)))
        ;;     (setq org-capture-entry (org-capture-select-template key)))
        ;;   (funcall +org-capture-fn)))
        ('error
         (message "org-roam-capture: %s" (error-message-string ex))
         (delete-frame frame))))))

(defun ar/org-roam-backlinks-popup ()
  (interactive)
  (when-let ((node (org-roam-node-at-point)))
    (let ((buffer (get-buffer-create org-roam-buffer)))
      (display-buffer buffer)
      (unless (equal node org-roam-buffer-current-node)
        (setq org-roam-buffer-current-node node
              org-roam-buffer-current-directory org-roam-directory)
        (with-current-buffer buffer
          (org-roam-buffer-render-contents)
          (add-hook 'kill-buffer-hook #'org-roam-buffer--persistent-cleanup-h nil t))))))

(defun ar/org-roam-backlinks-buffer ()
  (interactive)
  (when-let ((node (org-roam-node-at-point)))
    (org-roam-buffer-display-dedicated node)))
#+end_src

** Trello
#+begin_src emacs-lisp
(setq org-trello-mode-limit-fetch-since "2022-03-20")
#+end_src

** Calendar sync
#+begin_src go :tangle no
package main

import (
    "os"
    "time"
    "fmt"
    "github.com/apognu/gocal"
)

func main() {
    f, _ := os.Open(os.Args[1])
    defer f.Close()

    month := 31 * 24 * time.Hour
    start, end := time.Now().Add(-month), time.Now().Add(month * 12)

    c := gocal.NewParser(f)
    c.Start, c.End = &start, &end
    c.Parse()

    for _, e := range c.Events {
        fmt.Printf("* 🗓 %s\n<%s-%s>\n",
        e.Summary,
        e.Start.Format("2006-01-02 Mon 15:04"),
        e.End.Format("15:04"))
    }
}
#+end_src

#+begin_src elisp :tangle no
(defun ar/org-agenda-pomodoro-graph-2 (&optional arg)
  (interactive "P")
  (catch 'exit
    (org-agenda-prepare "PomodoroGraph")
    (org-agenda--insert-overriding-header "Pomodoro Graph:\n")
    (org-agenda-mark-header-line (point-min))

    (let* ((style svg-lib-style-default)
           (foreground      "#8e908c") ;; (plist-get style :foreground))
           (background      (plist-get style :background))
           (font-size       12) ;; TODO: handle retina
           (font-family     (plist-get style :font-family))
           (font-weight     (plist-get style :font-weight))
           (font-info       (font-info (format "%s-%d" font-family font-size)))
           (font-size       (aref font-info 2))
           (txt-char-height (aref font-info 3))
           (txt-char-width  (aref font-info 11))
           (nhours          15)
           (svg-width       (* 30 txt-char-width))
           (svg-height      (* 5 nhours txt-char-height))
           (svg-ascent      (plist-get style :ascent))
           (text-y          txt-char-height)
     (today (org-today))
           (files (org-agenda-files nil 'ifmode))
           (date  (calendar-gregorian-from-absolute today))
           (time  (current-time))
           (dt    (decode-time time))
           (h     (decoded-time-hour dt))
           (m     (decoded-time-minute dt))
           (s     (decoded-time-second dt))
           (diff  (+ (* (- h 8) 3600) (* m 60) s))
           (time  (time-subtract time (seconds-to-time diff)))
           (svg             (svg-create svg-width svg-height)))
      ;; (svg-rectangle svg (+ tag-x (/ stroke 2.0)) (/ stroke 2.0)
      ;;                   (- tag-width stroke) (- tag-height stroke)
      ;;                   :fill background :rx (- radius (/ stroke 2.0)))
      (dotimes (h nhours)
        (let ((start (time-add time (* h 3600))))
          (svg-text svg (format-time-string "%H:%M" start)
                    :font-family font-family
                    :font-weight font-weight
                    :font-size font-size
                    :fill-color foreground
                    :x 0 :y text-y)
          (setq text-y (+ text-y (* 5 txt-char-height)))))
      ;; (while (setq file (pop files))
      ;;   (catch 'nextfile
      ;;     (org-check-agenda-file file)
      ;;     (message "%s" (org-agenda-get-day-entries file (calendar-current-date)))))
      (insert-image (svg-lib--image svg :ascent svg-ascent)))

    (org-agenda-finalize)
    (setq buffer-read-only t)))
#+end_src

#+begin_src bash :tangle no
#!/bin/zsh

rm -f calendar-*.org

file=calendar-$(date +%Y-%m-%d-%H%M).org
foreach i ($@)
  ./ics-org $i >> $file
end
#+end_src

** LaTeX
#+begin_src emacs-lisp
(setq org-preview-latex-process-alist
      '((dvisvgm
         :programs ("/Library/TeX/texbin/latex" "/Library/TeX/texbin/dvisvgm")
         :description "dvi > svg"
         :message "you need to install the programs: latex and dvisvgm."
         :image-input-type "dvi"
         :image-output-type "svg"
         :image-size-adjust (1.7 . 1.5)
         :latex-compiler ("/Library/TeX/texbin/latex -interaction nonstopmode -output-directory %o %f")
         :image-converter ("/Library/TeX/texbin/dvisvgm %f -n -b min -c %S -o %O")))
      org-preview-latex-default-process 'dvisvgm)
#+end_src

** Helpers
#+begin_src emacs-lisp
(defun ar/org-refile-to-current-file (arg &optional file)
  "Refile current heading to elsewhere in the current buffer.
If prefix ARG, copy instead of move."
  (interactive "P")
  (let ((org-refile-targets `((,file :maxlevel . 1)))
        (org-refile-use-outline-path t)
        (org-refile-keep arg)
        current-prefix-arg)
    (call-interactively #'org-refile)))

(defun ar/org-inline-image-data-fn (_protocol link _description)
  (ignore-errors (base64-decode-string link)))
(advice-add #'+org-inline-image-data-fn :override #'ar/org-inline-image-data-fn)

(defun ar/org-refile-to-archive ()
  (interactive)
  (let ((org-refile-targets `(("~/org/archive.org" :maxlevel . 10)))
        (org-refile-use-outline-path t)
        (org-refile-keep nil))
    (call-interactively #'org-refile)))

(defun ar/org-filter-by-tag ()
  (interactive)
  (let ((org-agenda-files (list (buffer-file-name))))
    (org-tags-view)))

(defun ar/org-attach (file &optional method)
  (interactive
   (list
    (read-file-name "File to keep as an attachment: "
                    (or (progn
                          (require 'dired-aux)
                          (dired-dwim-target-directory))
                        default-directory))
    nil))
  (setq method (or method org-attach-method))
  (let ((basename (file-name-nondirectory file)))
    (let* ((attach-dir (org-attach-dir 'get-create))
           (attach-file (expand-file-name basename attach-dir))
	   (file-extension-re (image-file-name-regexp))
           (link (concat "attachment:" basename)))
      (cond
       ((eq method 'mv) (rename-file file attach-file))
       ((eq method 'cp) (copy-file file attach-file))
       ((eq method 'ln) (add-name-to-file file attach-file))
       ((eq method 'lns) (make-symbolic-link file attach-file))
       ((eq method 'url) (url-copy-file file attach-file)))
      (run-hook-with-args 'org-attach-after-change-hook attach-dir)
      (if (string-match-p file-extension-re basename)
          (progn
            (when (> org-download-image-org-width 0)
              (insert (format "#+attr_org: :width %dpx\n"
                              org-download-image-org-width)))
            (insert (org-link-make-string link))
            (org-display-inline-images))
        (insert (org-link-make-string link basename)))
      (org-attach-tag))))
#+end_src
** experiments
#+begin_src emacs-lisp

;; (use-package org-wild-notifier
;;   :custom
;;   (setq org-wild-notifier-keyword-whitelist nil
;;         org-wild-notifier--alert-severity 'high)
;;   :config
;;   (org-wild-notifier-mode 0))

;; (defvar org-pomodoro-started-hook nil
;;   "Hooks run when a pomodoro is started.")

;; (defvar org-pomodoro-finished-hook nil
;;   "Hooks run when a pomodoro is finished.")

;; (defvar org-pomodoro-overtime-hook nil
;;   "Hooks run when a pomodoro enters overtime.")

;; (defvar org-pomodoro-killed-hook nil
;;   "Hooks run when a pomodoro is killed.")

;; ~$ curl -v -H 'Authorization: Token 9dBXBOf-IbaeMkhdrVkW' -H 'Content-type: application/json' -d '{"projectId":5,"summary":"testing some stuff","completedAt":"2021-11-03T01:02:03Z"}' https://pomodoro.blackbits.pro/api/pomodoros

;; (defun org-habit-get-faces (habit &optional now-days scheduled-days donep)
;;   (let* ((scheduled (or scheduled-days (org-habit-scheduled habit)))
;; 	 (s-repeat (org-habit-scheduled-repeat habit))
;; 	 (d-repeat (org-habit-deadline-repeat habit))
;; 	 (deadline (if scheduled-days
;; 		       (+ scheduled-days (- d-repeat s-repeat))
;; 		     (org-habit-deadline habit)))
;; 	 (m-days (or now-days (time-to-days nil))))
;;     (cond
;;      ((and org-habit-show-done-always-green donep)
;;       '(org-habit-ready-face . org-habit-ready-future-face))
;;      ((< m-days scheduled)
;;       '(org-habit-clear-face . org-habit-clear-future-face))
;;      ((< m-days deadline)
;;       '(org-habit-ready-face . org-habit-ready-future-face))
;;      ((= m-days deadline)
;;       (if donep
;; 	  '(org-habit-ready-face . org-habit-ready-future-face)
;; 	'(org-habit-alert-face . org-habit-alert-future-face)))
;;      (t '(org-habit-overdue-face . org-habit-overdue-future-face)))))

;; (require 'svg-lib)
#+end_src

* Mu4e
#+begin_src emacs-lisp
(defun ar/set-msmtp-account ()
  (if (message-mail-p)
      (save-excursion
        ;; (let*
        ;;     ((from (save-restriction
        ;;              (message-narrow-to-headers)
        ;;              (message-fetch-field "from")))
        ;;      (account
        ;;       (cond
        ;;        ((string-match "dummy@icloud.com" from) "icloud")
        ;;        ((string-match "dummy@gmail.com" from) "gmail")
        ;;        ((string-match "dummy@example.com" from) "example"))))
        (setq message-sendmail-extra-arguments (list '"-a" "gmail")))))

;; (setq message-citation-line-function 'message-insert-formatted-citation-line)
;; (setq message-citation-line-format "\n\nOn %a, %d %b %Y at %R %Z, %N wrote:\n")

(setq +org-capture-emails-file "inbox.org")

(defun ar/org-msg-xml-to-str (xml)
  "Convert the XML tree into a HTML string."
  (cond ((and (listp xml) (equal xml '(p nil " ")))
         "<o:p>&nbsp;</o:p>")
        ((and (listp xml) (equal xml '(p nil)))
         "<o:p>\n</o:p>")
        ((stringp xml)
         (replace-regexp-in-string " " "&nbsp;"
                                   (org-msg-xml-escape-string xml)))
        ((eq (car xml) 'comment)
         (format "<!--%s-->" (caddr xml)))
        ((eq (car xml) 'style)
         (format "<style>%s</style>" (caddr xml)))
        ((cddr xml)
         (format "<%s%s>%s</%s>" (symbol-name (car xml))
                 (org-msg-attrs-str (cadr xml))
                 (apply 'concat (mapcar 'org-msg-xml-to-str (cddr xml)))
                 (symbol-name (car xml))))
        ((format "<%s%s></%s>" (symbol-name (car xml))
                 (org-msg-attrs-str (cadr xml))
                 (symbol-name (car xml))))))

(defun ar/mu4e-action-toggle-tag (msg tag)
  (let* ((tags (mu4e-message-field msg :tags))
         (docid (mu4e-message-field msg :docid))
         (sign (if (member tag tags) "-" "+")))
    (mu4e-action-retag-message msg (concat sign tag ",-\\Inbox"))
    (mu4e--server-move docid nil "+S-u-N")))

(defun ar/mu4e-action-tag-paper-trail (msg)
  (ar/mu4e-action-toggle-tag msg "Paper Trail"))

(defun ar/mu4e-action-tag-the-feed (msg)
  (ar/mu4e-action-toggle-tag msg "The Feed"))

(defun ar/mu4e-action-tag-sfc (msg)
  (ar/mu4e-action-toggle-tag msg "SFC"))

(defun ar/mu4e-tag-stripe (msg)
  (let* ((tags (mu4e-message-field msg :tags))
         (color (cond
                 ((member "Paper Trail" tags) 'all-the-icons-lblue)
                 ((member "The Feed" tags) 'all-the-icons-green)
                 ((member "SFC" tags) 'all-the-icons-red)
                 ((member "SFC/FB" tags) 'all-the-icons-lred)
                 ((member "Warnings" tags) 'all-the-icons-lpurple)
                 ((member "\\Inbox" tags) 'all-the-icons-yellow)
                 (t nil))))
    (if color (propertize "▌" 'face color 'help-echo color) "")))

(setq +mu4e-backend 'offlineimap
      mu4e-get-mail-command "/Users/anton/bin/check-mail")

(defun ar/mu4e ()
  (interactive)
  (require 'mu4e)
  (if (+workspace-exists-p +mu4e-workspace-name)
      (+workspace-switch +mu4e-workspace-name)
    (+workspace-switch +mu4e-workspace-name t)
    (mu4e)))

(after! mu4e
  (setq mu4e-bookmarks
        '((:name "Inbox" :query "tag:\\\\Inbox" :key ?i)
          (:name "Unread" :query "flag:unread and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?u)
          (:name "Today's messages" :query "date:today..now and not tag:warnings and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?t)
          (:name "SFC" :query "\"tag:SFC\" and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?s)
          (:name "Paper Trail" :query "\"tag:Paper Trail\" and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?p)
          (:name "The Feed" :query "\"tag:The Feed\" and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?f)
          (:name "Last 7 days" :query "date:7d..now and not tag:\\\\Trash and not maildir:/gmail/[Gmail].Trash" :key ?w)
          (:name "Sent" :query "from:anton@blackbits.pro" :key ?n)
          (:name "Trash" :query "maildir:/gmail/[Gmail].Trash" :key ?b)
          (:name "Spam" :query "maildir:/gmail/[Gmail].Spam" :key ?m)
          (:name "Messages with images" :query "mime:image/*" :key ?o))
        mu4e-org-contacts-file "~/org/contacts.org"
        send-mail-function 'sendmail-send-it
        sendmail-program "~/bin/queue-mail" ;;(executable-find "msmtp")
        message-kill-buffer-on-exit t
        mu4e-sent-messages-behavior 'sent
        message-send-mail-function 'sendmail-send-it
        message-sendmail-extra-arguments (list '"-a" "gmail")
        message-sendmail-envelope-from 'header
        message-citation-line-function 'message-insert-formatted-citation-line
        mu4e-headers-visible-flags '(draft flagged new passed replied trashed attach encrypted signed)
        mu4e-headers-replied-mark '("R" . "❮")
        mu4e-headers-fields '((:tag-stripe . 1)
                              (:human-date . 8)
                              (:flags . 6) ; 3 icon flags
                              (:from-or-to . 25)
                              (:subject))
        mu4e-compose-format-flowed t
        +mu4e-gmail-accounts '(("anton@blackbits.pro" . "/gmail"))
        ;; mu4e-user-mail-address-list '("anton@blackbits.pro"
        ;;                               "antonrogov@me.com"
        ;;                               "antondropbox@gmail.com")
        mu4e-headers-actions '(("capture message"  . mu4e-action-capture-message)
                               ("sfc tag" . (lambda (msg)
                                              (ar/mu4e-action-tag-sfc msg)
                                              (mu4e-headers-next)))
                               ("paper trail tag" . (lambda (msg)
                                                      (ar/mu4e-action-tag-paper-trail msg)
                                                      (mu4e-headers-next)))
                               ("feed tag" . (lambda (msg)
                                               (ar/mu4e-action-tag-the-feed msg)
                                               (mu4e-headers-next)))
                               ("show this thread" . mu4e-action-show-thread))
        mu4e-view-actions '(("capture message"  . mu4e-action-capture-message)
                            ("view in browser"  . mu4e-action-view-in-browser)
                            ("sfc tag" . (lambda (msg)
                                           (ar/mu4e-action-tag-sfc msg)
                                           (mu4e-headers-next)))
                            ("paper trail tag" . (lambda (msg)
                                                   (ar/mu4e-action-tag-paper-trail msg)
                                                   (mu4e-view-headers-next)))
                            ("feed tag" . (lambda (msg)
                                            (ar/mu4e-action-tag-the-feed msg)
                                            (mu4e-view-headers-next)))
                            ("show this thread" . mu4e-action-show-thread)))
  (add-hook 'message-send-mail-hook 'ar/set-msmtp-account)
  (set-email-account! "GMail"
                      '((user-full-name . "Anton Rogov")
                        (user-mail-address . "anton@blackbits.pro")
                        (smtpmail-smtp-user . "anton@blackbits.pro")
                        (mu4e-sent-folder . "/gmail/sent")
                        (mu4e-drafts-folder . "/gmail/[Gmail].All Mail")
                        (mu4e-trash-folder . "/gmail/[Gmail].Trash")
                        (mu4e-refile-folder . "/gmail/[Gmail].All Mail"))
                      t)
  (set-email-account! "iCloud"
                      '((mu4e-sent-folder       . "/icloud/Sent Messages")
                        (mu4e-drafts-folder     . "/icloud/Drafts")
                        (mu4e-trash-folder      . "/icloud/Deleted Messages")
                        (mu4e-refile-folder     . "/icloud/Archive")
                        (smtpmail-smtp-user     . "antonrogov@me.com"))
                      nil)
  (add-to-list 'mu4e-header-info-custom
               '(:tag-stripe .
                 (:name "Tag Stripe"
                  :shortname "▐"
                  :help "which tag this email has"
                  :function
                  (lambda (msg) (ar/mu4e-tag-stripe msg)))))
  (add-hook! 'mu4e-compose-mode-hook
    (lambda ()
      (setq-local +vertico-company-completion-styles '(flex))
      (company-mode 1)
      (flyspell-mode 1)))
  (advice-add #'org-msg-xml-to-str :override #'ar/org-msg-xml-to-str)
  (custom-set-faces
   '(mu4e-header-key-face ((t :inherit message-header-name :bold nil))))
  (custom-set-faces!
    '(mu4e-related-face :inherit default :slant normal)
    '(mu4e-unread-face :inherit font-lock-builtin-face :weight normal)
    '(mu4e-header-highlight-face :inherit hl-line :weight normal :extend t))
  (map! :map (mu4e-headers-mode-map
              mu4e-view-mode-map
              mu4e-main-mode-map
              mu4e-compose-mode-map
              org-msg-edit-mode-map)
        :nv "grr" #'mu4e-update-index)

  (map! :map (mu4e-compose-mode-map org-msg-edit-mode-map)
        :nv "grs" #'message-send-and-exit
        :nv "grc" #'message-kill-buffer
        :nv "grd" #'message-dont-send
        :nv "gra" #'+mu4e/attach-files))

(after! (mu4e company-mode)
  (set-company-backend! 'mu4e-compose-mode 'company-capf))
#+end_src

** org msg styling wip
#+begin_src emacs-lisp :tangle no
(setq org-msg-enforce-css
      (let* ((font-family '(font-family . "Arial,Helvetica,sans-serif"))
             (font-size '(font-size . "13px"))
             (font `(,font-family ,font-size))
             (line-height '(line-height . "19.5px"))
             (bold '(font-weight . "bold"))
             (theme-color "#0071c5")
             (color `(color . ,theme-color))
             (table `(,@font (margin-top . "0px")))
             (ftl-number `(,@font ,color ,bold (text-align . "left")))
             (inline-modes '(asl c c++ conf cpp csv diff ditaa emacs-lisp
                                 fundamental ini json makefile man org plantuml
                                 python sh xml))
             (inline-src `((color . ,(face-foreground 'default))
                           (background-color . ,(face-background 'default))))
             (code-src
              (mapcar (lambda (mode)
                        `(code ,(intern (concat "src src-" (symbol-name mode)))
                               ,inline-src))
                      inline-modes))
             (base-quote '((padding-left . "5px") (margin-left . "10px")
                           (margin-top . "10px") (margin-bottom . "0")))
             (quote-palette '("#324e72" "#6a3a4c" "#7a4900" "#ff34ff"
                              "#ff4a46" "#008941" "#006fa6" "#a30059"
                              "#ffdbe5" "#000000" "#0000a6" "#63ffac"))
             (quotes
              (mapcar (lambda (x)
                        (let ((c (nth x quote-palette)))
                          `(blockquote ,(intern (format "quote%d" (1+ x)))
                                       (,@base-quote
                                        (color . ,c)
                                        (border-left . ,(concat "3px solid "
                                                                (org-msg-lighten c)))))))
                      (number-sequence 0 (1- (length quote-palette))))))
        `((del nil (,@font (color . "grey") (border-left . "none")
                           (text-decoration . "line-through") (margin-bottom . "0px")
                           (margin-top . "10px") (line-height . "19.5px")))
          (a nil (,color))
          (a reply-header ((color . "black") (text-decoration . "none")))
          (div reply-header ((padding . "3.0pt 0in 0in 0in")
                             (border-top . "solid #e1e1e1 1.0pt")
                             (margin-bottom . "20px")))
          (span underline ((text-decoration . "underline")))
          (li nil (,@font ,line-height (margin-bottom . "0px")
                          (margin-top . "2px")))
          (nil org-ul ((list-style-type . "square")))
          (nil org-ol (,@font ,line-height (margin-bottom . "0px")
                              (margin-top . "0px") (margin-left . "30px")
                              (padding-top . "0px") (padding-left . "5px")))
          (nil signature (,@font (margin-bottom . "20px")))
          (blockquote quote0 ,(append base-quote '((border-left . "3px solid #ccc"))))
          ,@quotes
          (code nil (,font-size (font-family . "monospace") (background . "#f9f9f9")))
          ,@code-src
          (nil linenr ((padding-right . "1em")
                       (color . "black")
                       (background-color . "#aaaaaa")))
          (pre nil ((line-height . "20px")
                    ,@inline-src
                    (margin . "0px")
                    (font-size . "13px")
                    (font-family . "monospace")))
          (div org-src-container ((margin-top . "10px")))
          (nil figure-number ,ftl-number)
          (nil table-number)
          (caption nil ((text-align . "left")
                        (background . ,theme-color)
                        (color . "white")
                        ,bold))
          (nil t-above ((caption-side . "top")))
          (nil t-bottom ((caption-side . "bottom")))
          (nil listing-number ,ftl-number)
          (nil figure ,ftl-number)
          (nil org-src-name ,ftl-number)

          (table nil (,@table ,line-height (border-collapse . "collapse")))
          (th nil ((border . "1px solid white")
                   (background-color . ,theme-color)
                   (color . "white")
                   (padding-left . "10px") (padding-right . "10px")))
          (td nil (,@table (padding-left . "10px") (padding-right . "10px")
                           (background-color . "#f9f9f9") (border . "1px solid white")))
          (td org-left ((text-align . "left")))
          (td org-right ((text-align . "right")))
          (td org-center ((text-align . "center")))

          (div outline-text-4 ((margin-left . "15px")))
          (div outline-4 ((margin-left . "10px")))
          (h4 nil ((margin-bottom . "0px") (font-size . "13px")
                   ,font-family))
          (h3 nil ((margin-bottom . "0px") (text-decoration . "underline")
                   ,color (font-size . "14px")
                   ,font-family))
          (h2 nil ((margin-top . "20px") (margin-bottom . "20px")
                   (font-style . "italic") ,color (font-size . "14px")
                   ,font-family))
          (h1 nil ((margin-top . "20px")
                   (margin-bottom . "0px") ,color (font-size . "16px")
                   ,font-family))
          (p nil nil)
          (div nil nil))))
#+end_src

* Flycheck
#+begin_src emacs-lisp
(after! flycheck
  ;; (setq! flycheck-display-errors-delay 0)
  ;; (defun ar/enable-lsp-ui-mode ()
  ;;   (lsp-ui-mode 1)
  ;;   (lsp-ui-sideline-mode 1))
  ;; (add-hook! 'flycheck-mode-hook #'ar/enable-lsp-ui-mode)
  (setq flycheck-display-errors-delay 0.1)

  (defun ar/jump-to-error (err)
    (flycheck-jump-to-error err)
    (run-at-time flycheck-display-errors-delay nil
                 'flycheck-display-error-at-point))

  (defun ar/next-error (&optional n)
    (interactive)
    (-if-let* ((pos (or (flycheck-next-error-pos n)
                        (flycheck-next-error-pos n t)))
               (err (get-char-property pos 'flycheck-error)))
        (ar/jump-to-error err)
      (user-error "No errors")))

  (defun ar/last-error-pos ()
    (save-excursion
      (goto-char (point-max))
      (flycheck-next-error-pos -1)))

  (defun ar/previous-error ()
    (interactive)
    (-if-let* ((pos (or (flycheck-next-error-pos -1)
                        (ar/last-error-pos)))
               (err (get-char-property pos 'flycheck-error)))
        (ar/jump-to-error err)
      (user-error "No errors")))

  (map! :m "[d" #'ar/previous-error
        :m "]d" #'ar/next-error)

  (flycheck-define-checker slim-lint
    "A Slim linter."
    :command ("slim-lint" "--reporter=checkstyle" source-original)
    :error-parser flycheck-parse-checkstyle
    :modes slim-mode))

(after! flycheck-posframe
  (setq flycheck-posframe-border-width 1
        flycheck-posframe-warning-prefix " ■ "
        flycheck-posframe-info-prefix " ■ "
        flycheck-posframe-error-prefix " ■ ")

  (defun ar/flycheck-posframe-get-face-for-error (err)
    (let ((level (flycheck-error-level err)))
      (if (string-equal (symbol-name level)
                        "lsp-flycheck-info-unnecessary")
          'font-lock-constant-face
        (pcase level
          ('info 'success)
          ('warning 'flycheck-posframe-warning-face)
          ('error 'flycheck-posframe-error-face)
          (_ 'flycheck-posframe-face)))))

  (defun flycheck-posframe-format-error (err)
    (let* ((str (flycheck-error-format-message-and-id err))
           (no-space (if (string-prefix-p " " str) (substring str 1) str))
           (newlines (string-replace "\n" " \n " no-space)))
      (propertize (concat " ■ " newlines " ")
                  'face
                  `(:inherit ,(ar/flycheck-posframe-get-face-for-error err))))))

(after! posframe
  (defadvice! ar/posframe-run-poshandler (fn info)
    :around #'posframe-run-poshandler
    (when (and (equal info posframe--last-poshandler-info)
               (integerp (plist-get info :position)))
      (setq posframe--last-poshandler-info nil))
    (funcall fn info))

  ;; (defun ar/posframe-hidehandler-daemon ()
  (when (timerp posframe-hidehandler-timer)
    (cancel-timer posframe-hidehandler-timer))
  (setq posframe-hidehandler-timer
        (run-with-idle-timer
         flycheck-display-errors-delay t
         #'posframe-hidehandler-daemon-function))
  ;; )
  )
#+end_src

* Other
#+begin_src emacs-lisp
;; (load! "ar-alert")
(defun ar/show-alert (info)
  (let ((args
         (list "-title"   (alert-encode-string (plist-get info :title))
               "-sender"  "org.gnu.Emacs"
               "-message" (alert-encode-string (plist-get info :message)))))
    (apply #'call-process "terminal-notifier" nil nil nil args)))

(after! alert
  (alert-define-style 'ar-notifier
                      :title "Notify using terminal-notifier"
                      :notifier #'ar/show-alert)
  (setq alert-default-style 'ar-notifier))
;; (advice-add #'alert-notifier-notify :override #'ar/alert-notifier-notify))

;; (add-hook 'company-mode-hook
;;           (lambda ()
;;             (add-to-list 'company-backends 'company-dabbrev-code)))

(after! ruby-mode
  (modify-syntax-entry ?_ "w" ruby-mode-syntax-table))
;; (modify-syntax-entry ?_ "w" inf-ruby-mode-syntax-table)

(after! projectile-rails
  (setq projectile-rails-expand-snippet-with-magic-comment t))

(after! slim-mode
  (setq tab-width 2))
(setq-hook! 'after-change-major-mode-hook evil-shift-width tab-width)

(after! rspec-mode
  (setq rspec-primary-source-dirs '("app")
        rspec-use-bundler-when-possible nil
        rspec-spec-command "direnv exec . rspec"
        rspec-command-options "--require ~/.config/doom/emacs_formatter.rb --format EmacsFormatter"
        rspec-use-relative-path t))
;; (setq-default rspec-spec-command "source /usr/local/opt/chruby/share/chruby/chruby.sh && source /usr/local/opt/gem_home/share/gem_home/gem_home.sh && chruby $(cat .ruby-version) && gem_home . && rspec")

(setq vterm-max-scrollback 10000)

(setq +workspaces-on-switch-project-behavior t)
(setq +workspaces-switch-project-function #'magit-status)
#+end_src

* Custom project switcher
#+begin_src emacs-lisp
(cl-defstruct ar-project name root)

(defun ar/switch-project ()
  (interactive)
  (require 'projectile)
  (let ((name (completing-read "Switch to project: "
                               (mapcar #'ar-project-name ar/known-projects))))
    (if (member name (+workspace-list-names))
        (+workspace-switch name t)
      (catch 'found
        (dolist (p ar/known-projects)
          (when (equal name (ar-project-name p))
            (projectile-switch-project-by-name (ar-project-root p))
            (throw 'found p)))))))

(map! "s-p" #'ar/switch-project)
#+end_src

#+begin_src text :tangle snippets/ruby-mode/init
# -*- mode: snippet -*-
# name: init
# key: init
# uuid: init
# --
def initialize${1:()}
end
#+end_src

* Keybindings
#+begin_src emacs-lisp
(defmacro add-workspace-switches-to-mode-map! (map)
  `(define-key! ,map
     "s-1"   #'+workspace/switch-to-0
     "s-2"   #'+workspace/switch-to-1
     "s-3"   #'+workspace/switch-to-2
     "s-4"   #'+workspace/switch-to-3
     "s-5"   #'+workspace/switch-to-4
     "s-6"   #'+workspace/switch-to-5
     "s-7"   #'+workspace/switch-to-6
     "s-8"   #'+workspace/switch-to-7
     "s-9"   #'+workspace/switch-to-8
     "s-0"   #'+workspace/switch-to-final))

(after! org
  (add-workspace-switches-to-mode-map! evil-org-agenda-mode-map))

(after! vterm
  (add-workspace-switches-to-mode-map! vterm-mode-map)
  (define-key vterm-mode-map (kbd "C-c C-x") #'vterm-send-C-x))

(map! "s-h" #'evil-window-left
      "s-j" #'evil-window-down
      "s-k" #'evil-window-up
      "s-l" #'evil-window-right
      "s--" (lambda () (interactive) (ar/change-font-size (- ar/font-size 2)))
      "s-=" (lambda () (interactive) (ar/change-font-size (+ ar/font-size 2)))
      "s-p" #'ar/switch-project
      [mouse-3] #'previous-buffer
      [mouse-4] #'next-buffer)

(map! :leader
      ;; :desc "Find file in project"     "SPC" #'ar/projectile-find-file
      :desc "Switch to last buffer"    "," #'evil-switch-to-windows-last-buffer
      :desc "Switch buffer"            "<" #'persp-switch-to-buffer
      :desc "Switch workspace buffer"  "`" #'switch-to-buffer
      :desc "Switch to scratch buffer" "X" #'doom/switch-to-scratch-buffer
      :desc "Capture to inbox"         "x"
      (lambda () (interactive) (org-capture nil "i"))
      (:prefix "TAB"
       :desc "Switch to last workspace"  ","   #'+workspace/other)
      (:prefix "b"
       :desc "Rename buffer" "R" #'rename-buffer)
      (:prefix "f"
       :desc "Browse project" "F" #'+default/browse-project)
      (:prefix "n"
       :desc "Open random node" "a" #'org-roam-node-random
       :desc "Open backlinks popup" "b" #'ar/org-roam-backlinks-popup
       :desc "Toggle backlinks for current node" "B" #'ar/org-roam-backlinks-buffer
       :desc "Find roam node" "f" #'org-roam-node-find
       :desc "Roam graph" "g" #'org-roam-graph
       :desc "Insert link to roam node" "i" #'org-roam-node-insert)
      (:prefix "o"
       ;; :desc "Agenda" "a"
       ;; (lambda (&optional arg) (interactive) (org-agenda arg "n"))
       :desc "Calendar" "c"
       (lambda ()
         (interactive)
         (cfw:open-calendar-buffer
          :contents-sources
          (list
           (cfw:org-create-source (face-foreground 'default)))))
       :desc "Browse home directory" "h" #'ar/open-dired
       :desc "mu4e" "m" #'ar/mu4e
       :desc "News" "n" #'=rss
       :desc "Quick calc" "q" #'quick-calc
       :desc "Schedule" "s"
       (lambda (&optional arg) (interactive) (org-agenda arg "n"))
       :desc "Open vterm here" "t" #'+vterm/here
       :desc "Toggle vterm popup" "T" #'+vterm/toggle
       :desc "Twitter" "v" #'=twitter
       :desc "This week" "w"
       (lambda (&optional arg) (interactive) (org-agenda arg "w")))
      (:prefix "q"
       :desc "Close all popups" "p" #'+popup/close-all))

(map! :map org-mode-map
      :localleader
      "!" #'org-babel-tangle
      (:prefix "a"
       "f" #'ar/org-attach
       "F" #'+org/find-file-in-attachments)
      (:prefix "b"
       :desc "Pomodoro block" "u" (lambda () (interactive) (org-pomodoro-dblock-update)))
      (:prefix "c"
       :desc "Last month" "D" (lambda () (interactive) (org-pomodoro-display 'lastmonth))
       :desc "This month" "M" (lambda () (interactive) (org-pomodoro-display 'thismonth))
       :desc "Today" "T" (lambda () (interactive) (org-pomodoro-display 'today))
       :desc "Custom" "u" (lambda () (interactive) (org-pomodoro-display 'interactive))
       "h" #'org-clock-remove-overlays
       "s" #'org-pomodoro-display
       "p" #'org-pomodoro
       "P" #'ar/add-pomodoro)
      (:prefix "d"
       :desc "Date with time" "n"
       (lambda () (interactive) (org-time-stamp-inactive t)))
      "f" #'ar/org-filter-by-tag
      "F" #'org-footnote-action
      (:prefix "r"
       :desc "Refile to archive" "a" #'ar/org-refile-to-archive
       :desc "Refile to heading" "h" #'ar/org-refile-to-current-file))

(map! :map (rspec-verifiable-mode-map rspec-mode-map)
      :n "RET" #'rspec-verify
      :localleader
      :prefix "t"
      "t" #'rspec-toggle-spec-and-target
      "T" #'rspec-toggle-spec-and-target-find-example)

(map! :after org-agenda
      :map org-agenda-mode-map
      :m "cp" #'org-pomodoro
      :m "cP" #'ar/add-pomodoro
      :m "cs" #'ar/pomodoro-go
      :localleader
      (:prefix ("c" . "clock")
       "p" #'org-pomodoro))

;; (setq-default meta-prefix-char nil)
(define-key global-map "\C-[" [escape])
#+end_src

;; (setq evil-esc-delay 0.0001)

* Twitter (disabled)
#+begin_src emacs-lisp :tangle no
;; (setenv "PATH" (s-replace "/usr/local/bin" ":/usr/local/bin" (getenv "PATH")))

;; (byte-recompile-directory "~/.emacs.d/.local/straight/repos" 0)

;; (defun *twittering-generate-format-table (status-sym prefix-sym)
;;   `(("%" . "%")
;;     ("}" . "}")
;;     ("#" . (cdr (assq 'id ,status-sym)))
;;     ("'" . (when (cdr (assq 'truncated ,status-sym))
;;              "..."))
;;     ("c" .
;;      (let ((system-time-locale "C"))
;;        (format-time-string "%a %b %d %H:%M:%S %z %Y"
;;                            (cdr (assq 'created-at ,status-sym)))))
;;     ("d" . (cdr (assq 'user-description ,status-sym)))
;;     ("f" .
;;      (twittering-make-string-with-source-property
;;       (cdr (assq 'source ,status-sym)) ,status-sym))
;;     ("i" .
;;      (when (and twittering-icon-mode window-system)
;;        (let ((url
;;               (cond
;;                ((and twittering-use-profile-image-api
;;                      (eq twittering-service-method 'twitter)
;;                      (or (null twittering-convert-fix-size)
;;                          (member twittering-convert-fix-size '(48 73))))
;;                 (let ((user (cdr (assq 'user-screen-name ,status-sym)))
;;                       (size
;;                        (if (or (null twittering-convert-fix-size)
;;                                (= 48 twittering-convert-fix-size))
;;                            "normal"
;;                          "bigger")))
;;                   (format "http://%s/%s/%s.xml?size=%s" twittering-api-host
;;                           (twittering-api-path "users/profile_image") user size)))
;;                (t
;;                 (cdr (assq 'user-profile-image-url ,status-sym))))))
;;          (twittering-make-icon-string nil nil url))))
;;     ("I" .
;;      (let* ((entities (cdr (assq 'entity ,status-sym)))
;;             text)
;;        (mapc (lambda (url-info)
;;                (setq text (or (cdr (assq 'media-url url-info)) "")))
;;              (cdr (assq 'media entities)))
;;        (if (string-equal "" text)
;;            text
;;          (let ((twittering-convert-fix-size 360))
;;            (twittering-make-icon-string nil nil text)))))
;;     ("j" . (cdr (assq 'user-id ,status-sym)))
;;     ("L" .
;;      (let ((location (or (cdr (assq 'user-location ,status-sym)) "")))
;;        (unless (string= "" location)
;;          (concat " [" location "]"))))
;;     ("l" . (cdr (assq 'user-location ,status-sym)))
;;     ("p" . (when (cdr (assq 'user-protected ,status-sym))
;;              "[x]"))
;;     ("r" .
;;      (let ((reply-id (or (cdr (assq 'in-reply-to-status-id ,status-sym)) ""))
;;            (reply-name (or (cdr (assq 'in-reply-to-screen-name ,status-sym))
;;                            ""))
;;            (recipient-screen-name
;;             (cdr (assq 'recipient-screen-name ,status-sym))))
;;        (let* ((pair
;;                (cond
;;                 (recipient-screen-name
;;                  (cons (format "sent to %s" recipient-screen-name)
;;                        (twittering-get-status-url recipient-screen-name)))
;;                 ((and (not (string= "" reply-id))
;;                       (not (string= "" reply-name)))
;;                  (cons (format "in reply to %s" reply-name)
;;                        (twittering-get-status-url reply-name reply-id)))
;;                 (t nil)))
;;               (str (car pair))
;;               (url (cdr pair))
;;               (properties
;;                (list 'mouse-face 'highlight 'face 'twittering-uri-face
;;                      'keymap twittering-mode-on-uri-map
;;                      'uri url
;;                      'front-sticky nil
;;                      'rear-nonsticky t)))
;;          (when (and str url)
;;            (concat " " (apply 'propertize str properties))))))
;;     ("R" .
;;      (let ((retweeted-by
;;             (or (cdr (assq 'retweeting-user-screen-name ,status-sym)) "")))
;;        (unless (string= "" retweeted-by)
;;          (concat " (retweeted by " retweeted-by ")"))))
;;     ("S" .
;;      (twittering-make-string-with-user-name-property
;;       (cdr (assq 'user-name ,status-sym)) ,status-sym))
;;     ("s" .
;;      (twittering-make-string-with-user-name-property
;;       (cdr (assq 'user-screen-name ,status-sym)) ,status-sym))
;;     ("U" .
;;      (twittering-make-fontified-tweet-unwound ,status-sym))
;;     ;; ("D" .
;;     ;;  (twittering-make-fontified-tweet-unwound ,status-sym))
;;     ("T" .
;;      ,(twittering-make-fontified-tweet-text
;;        `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
;;        twittering-regexp-hash twittering-regexp-atmark))
;;     ("t" .
;;      ,(twittering-make-fontified-tweet-text
;;        `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
;;        twittering-regexp-hash twittering-regexp-atmark))
;;     ("u" . (cdr (assq 'user-url ,status-sym)))))

(setq rmh-elfeed-org-files '("~/.doom.d/elfeed.org"))

(after! twittering-mode
  (add-workspace-switches-to-mode-map! twittering-mode-map)
  (setq twittering-initial-timeline-spec-string '(":home")
        twittering-proxy-use t
        twittering-proxy-server "socks5h://localhost"
        twittering-proxy-port 8080
        twittering-icon-mode t
        twittering-use-profile-image-api nil
        twittering-display-remaining t
        ;; twittering-convert-program "/opt/homebrew/opt/imagemagick@6/bin/convert"
        twittering-use-convert nil
        ;; twittering-use-icon-storage nil
        ;; twittering-convert-fix-size 12
        twittering-status-format "%i %FOLD[ ]{%FACE[font-lock-function-name-face]{@%s}  %FACE[shadow]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}
%T%QT{
%FOLD[  ]{
%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%T}}}
%FACE[twitter-divider]{                              }
"
;;         twittering-status-format "
;;   %i  %FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}

;; %FOLD[   ]{%FILL{%t}
;; %QT{
;; %FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
;; %FOLD[ ]{%FILL{%t}}
;; }}}

;;     %I

;; %FACE[twitter-divider]{                                                                                                                                                                                  }
;; ")
  ;; (defface twitter-divider
  ;;   `((t (:underline (:color "grey"))))
  ;;   "The vertical divider between tweets."
  ;;   :group 'twittering-mode)
  ;; (advice-add #'twittering-generate-format-table :override #'*twittering-generate-format-table)
  ))

;; (defun twittering-make-icon-string (beg end image-url)
;;   (message image-url)
;;   (let ((display-spec (twittering-get-display-spec-for-icon image-url))
;;         (image-data (gethash image-url twittering-url-data-hash))
;;         (properties (and beg (text-properties-at beg)))
;;         (icon-string (copy-sequence " ")))
;;     (when properties
;;       (add-text-properties 0 (length icon-string) properties icon-string))
;;     (cond
;;      (display-spec
;;       (let ((icon-string (apply 'propertize "_"
;;                                 (append properties display-spec))))
;;         ;; Remove the property required no longer.
;;         (remove-text-properties 0 (length icon-string)
;;                                 '(need-to-be-updated nil)
;;                                 icon-string)
;;         icon-string))
;;      ((and (integerp image-data)
;;            (<= twittering-url-request-retry-limit image-data))
;;       ;; Try to retrieve the image no longer.
;;       (twittering-register-image-data image-url nil)
;;       (twittering-make-icon-string beg end image-url))
;;      ((and image-data (not (integerp image-data)))
;;       (twittering-register-image-data image-url image-data)
;;       (twittering-make-icon-string beg end image-url))
;;      (t
;;       (put-text-property 0 (length icon-string)
;;                          'need-to-be-updated
;;                          `(twittering-make-icon-string ,image-url)
;;                          icon-string)
;;       (twittering-url-retrieve-async image-url 'twittering-register-image-data)
;;       icon-string))))
#+end_src

* Graphviz preview
#+begin_src emacs-lisp
(defvar ar/graphviz-preview "*graphviz-preview*")
(defvar ar/graphviz-preview-error "*graphviz-preview-error*")

(defun graphviz-preview ()
  (interactive)
  (let* ((use-empty-active-region nil)
        (process (make-process
                  :name "graphviz-preview"
                  :command '("dot" "-Tpng")
                  :buffer ar/graphviz-preview
                  :stderr ar/graphviz-preview-error
                  :sentinel
                  (lambda (_ event)
                    (cond
                      ((string= event "finished\n")
                      (with-current-buffer ar/graphviz-preview (image-mode))
                      (let ((display-buffer-alist '((".*" display-buffer-same-window))))
                        (display-buffer ar/graphviz-preview)))
                      (t (message "Failed to generate a preview")))))))
    (process-send-region process (point-min) (point-max))
    (process-send-eof process)))

#+end_src

;; (use-package graphviz-dot-mode
;;   :ensure t
;;   :config
;;   (setq graphviz-dot-preview-extension "svg"))
